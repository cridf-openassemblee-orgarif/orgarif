/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import orgarif.jooq.generated.tables.AppUserTable;
import orgarif.jooq.generated.tables.CommandLogTable;
import orgarif.jooq.generated.tables.DeliberationTable;
import orgarif.jooq.generated.tables.DepartementTable;
import orgarif.jooq.generated.tables.DeploymentLogTable;
import orgarif.jooq.generated.tables.DesignationTable;
import orgarif.jooq.generated.tables.EluTable;
import orgarif.jooq.generated.tables.InstanceTable;
import orgarif.jooq.generated.tables.LienDeliberationTable;
import orgarif.jooq.generated.tables.MagicLinkTokenTable;
import orgarif.jooq.generated.tables.MailLogTable;
import orgarif.jooq.generated.tables.NatureJuridiqueTable;
import orgarif.jooq.generated.tables.OrganismeTable;
import orgarif.jooq.generated.tables.RepresentantTable;
import orgarif.jooq.generated.tables.SecteurTable;
import orgarif.jooq.generated.tables.TypeStructureTable;
import orgarif.jooq.generated.tables.UserFileTable;
import orgarif.jooq.generated.tables.UserMailLogTable;
import orgarif.jooq.generated.tables.UserSessionLogTable;
import orgarif.jooq.generated.tables.records.AppUserRecord;
import orgarif.jooq.generated.tables.records.CommandLogRecord;
import orgarif.jooq.generated.tables.records.DeliberationRecord;
import orgarif.jooq.generated.tables.records.DepartementRecord;
import orgarif.jooq.generated.tables.records.DeploymentLogRecord;
import orgarif.jooq.generated.tables.records.DesignationRecord;
import orgarif.jooq.generated.tables.records.EluRecord;
import orgarif.jooq.generated.tables.records.InstanceRecord;
import orgarif.jooq.generated.tables.records.LienDeliberationRecord;
import orgarif.jooq.generated.tables.records.MagicLinkTokenRecord;
import orgarif.jooq.generated.tables.records.MailLogRecord;
import orgarif.jooq.generated.tables.records.NatureJuridiqueRecord;
import orgarif.jooq.generated.tables.records.OrganismeRecord;
import orgarif.jooq.generated.tables.records.RepresentantRecord;
import orgarif.jooq.generated.tables.records.SecteurRecord;
import orgarif.jooq.generated.tables.records.TypeStructureRecord;
import orgarif.jooq.generated.tables.records.UserFileRecord;
import orgarif.jooq.generated.tables.records.UserMailLogRecord;
import orgarif.jooq.generated.tables.records.UserSessionLogRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AppUserRecord> APP_USER_MAIL_KEY = Internal.createUniqueKey(AppUserTable.APP_USER, DSL.name("app_user_mail_key"), new TableField[] { AppUserTable.APP_USER.MAIL }, true);
    public static final UniqueKey<AppUserRecord> APP_USER_PKEY = Internal.createUniqueKey(AppUserTable.APP_USER, DSL.name("app_user_pkey"), new TableField[] { AppUserTable.APP_USER.ID }, true);
    public static final UniqueKey<CommandLogRecord> COMMAND_LOG_PKEY = Internal.createUniqueKey(CommandLogTable.COMMAND_LOG, DSL.name("command_log_pkey"), new TableField[] { CommandLogTable.COMMAND_LOG.ID }, true);
    public static final UniqueKey<DeliberationRecord> DELIBERATION_PKEY = Internal.createUniqueKey(DeliberationTable.DELIBERATION, DSL.name("deliberation_pkey"), new TableField[] { DeliberationTable.DELIBERATION.ID }, true);
    public static final UniqueKey<DepartementRecord> DEPARTEMENT_PKEY = Internal.createUniqueKey(DepartementTable.DEPARTEMENT, DSL.name("departement_pkey"), new TableField[] { DepartementTable.DEPARTEMENT.ID }, true);
    public static final UniqueKey<DeploymentLogRecord> DEPLOYMENT_LOG_PKEY = Internal.createUniqueKey(DeploymentLogTable.DEPLOYMENT_LOG, DSL.name("deployment_log_pkey"), new TableField[] { DeploymentLogTable.DEPLOYMENT_LOG.ID }, true);
    public static final UniqueKey<DesignationRecord> DESIGNATION_PKEY = Internal.createUniqueKey(DesignationTable.DESIGNATION, DSL.name("designation_pkey"), new TableField[] { DesignationTable.DESIGNATION.ID }, true);
    public static final UniqueKey<EluRecord> ELU_PKEY = Internal.createUniqueKey(EluTable.ELU, DSL.name("elu_pkey"), new TableField[] { EluTable.ELU.ID }, true);
    public static final UniqueKey<InstanceRecord> INSTANCE_PKEY = Internal.createUniqueKey(InstanceTable.INSTANCE, DSL.name("instance_pkey"), new TableField[] { InstanceTable.INSTANCE.ID }, true);
    public static final UniqueKey<LienDeliberationRecord> LIEN_DELIBERATION_PKEY = Internal.createUniqueKey(LienDeliberationTable.LIEN_DELIBERATION, DSL.name("lien_deliberation_pkey"), new TableField[] { LienDeliberationTable.LIEN_DELIBERATION.ID }, true);
    public static final UniqueKey<MagicLinkTokenRecord> MAGIC_LINK_TOKEN_PKEY = Internal.createUniqueKey(MagicLinkTokenTable.MAGIC_LINK_TOKEN, DSL.name("magic_link_token_pkey"), new TableField[] { MagicLinkTokenTable.MAGIC_LINK_TOKEN.TOKEN }, true);
    public static final UniqueKey<MailLogRecord> MAIL_LOG_PKEY = Internal.createUniqueKey(MailLogTable.MAIL_LOG, DSL.name("mail_log_pkey"), new TableField[] { MailLogTable.MAIL_LOG.ID }, true);
    public static final UniqueKey<NatureJuridiqueRecord> NATURE_JURIDIQUE_PKEY = Internal.createUniqueKey(NatureJuridiqueTable.NATURE_JURIDIQUE, DSL.name("nature_juridique_pkey"), new TableField[] { NatureJuridiqueTable.NATURE_JURIDIQUE.ID }, true);
    public static final UniqueKey<OrganismeRecord> ORGANISME_PKEY = Internal.createUniqueKey(OrganismeTable.ORGANISME, DSL.name("organisme_pkey"), new TableField[] { OrganismeTable.ORGANISME.ID }, true);
    public static final UniqueKey<RepresentantRecord> REPRESENTANT_PKEY = Internal.createUniqueKey(RepresentantTable.REPRESENTANT, DSL.name("representant_pkey"), new TableField[] { RepresentantTable.REPRESENTANT.ID }, true);
    public static final UniqueKey<SecteurRecord> SECTEUR_PKEY = Internal.createUniqueKey(SecteurTable.SECTEUR, DSL.name("secteur_pkey"), new TableField[] { SecteurTable.SECTEUR.ID }, true);
    public static final UniqueKey<TypeStructureRecord> TYPE_STRUCTURE_PKEY = Internal.createUniqueKey(TypeStructureTable.TYPE_STRUCTURE, DSL.name("type_structure_pkey"), new TableField[] { TypeStructureTable.TYPE_STRUCTURE.ID }, true);
    public static final UniqueKey<UserFileRecord> USER_FILE_PKEY = Internal.createUniqueKey(UserFileTable.USER_FILE, DSL.name("user_file_pkey"), new TableField[] { UserFileTable.USER_FILE.ID }, true);
    public static final UniqueKey<UserMailLogRecord> USER_MAIL_LOG_PKEY = Internal.createUniqueKey(UserMailLogTable.USER_MAIL_LOG, DSL.name("user_mail_log_pkey"), new TableField[] { UserMailLogTable.USER_MAIL_LOG.ID }, true);
    public static final UniqueKey<UserSessionLogRecord> USER_SESSION_LOG_PKEY = Internal.createUniqueKey(UserSessionLogTable.USER_SESSION_LOG, DSL.name("user_session_log_pkey"), new TableField[] { UserSessionLogTable.USER_SESSION_LOG.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CommandLogRecord, DeploymentLogRecord> COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY = Internal.createForeignKey(CommandLogTable.COMMAND_LOG, DSL.name("command_log_deployment_log_id_fkey"), new TableField[] { CommandLogTable.COMMAND_LOG.DEPLOYMENT_LOG_ID }, Keys.DEPLOYMENT_LOG_PKEY, new TableField[] { DeploymentLogTable.DEPLOYMENT_LOG.ID }, true);
    public static final ForeignKey<DesignationRecord, InstanceRecord> DESIGNATION__DESIGNATION_INSTANCE_ID_FKEY = Internal.createForeignKey(DesignationTable.DESIGNATION, DSL.name("designation_instance_id_fkey"), new TableField[] { DesignationTable.DESIGNATION.INSTANCE_ID }, Keys.INSTANCE_PKEY, new TableField[] { InstanceTable.INSTANCE.ID }, true);
    public static final ForeignKey<DesignationRecord, OrganismeRecord> DESIGNATION__DESIGNATION_ORGANISME_ID_FKEY = Internal.createForeignKey(DesignationTable.DESIGNATION, DSL.name("designation_organisme_id_fkey"), new TableField[] { DesignationTable.DESIGNATION.ORGANISME_ID }, Keys.ORGANISME_PKEY, new TableField[] { OrganismeTable.ORGANISME.ID }, true);
    public static final ForeignKey<DesignationRecord, RepresentantRecord> DESIGNATION__DESIGNATION_REPRESENTANT_ID_FKEY = Internal.createForeignKey(DesignationTable.DESIGNATION, DSL.name("designation_representant_id_fkey"), new TableField[] { DesignationTable.DESIGNATION.REPRESENTANT_ID }, Keys.REPRESENTANT_PKEY, new TableField[] { RepresentantTable.REPRESENTANT.ID }, true);
    public static final ForeignKey<InstanceRecord, OrganismeRecord> INSTANCE__INSTANCE_ORGANISME_ID_FKEY = Internal.createForeignKey(InstanceTable.INSTANCE, DSL.name("instance_organisme_id_fkey"), new TableField[] { InstanceTable.INSTANCE.ORGANISME_ID }, Keys.ORGANISME_PKEY, new TableField[] { OrganismeTable.ORGANISME.ID }, true);
    public static final ForeignKey<LienDeliberationRecord, DeliberationRecord> LIEN_DELIBERATION__LIEN_DELIBERATION_DELIBERATION_ID_FKEY = Internal.createForeignKey(LienDeliberationTable.LIEN_DELIBERATION, DSL.name("lien_deliberation_deliberation_id_fkey"), new TableField[] { LienDeliberationTable.LIEN_DELIBERATION.DELIBERATION_ID }, Keys.DELIBERATION_PKEY, new TableField[] { DeliberationTable.DELIBERATION.ID }, true);
    public static final ForeignKey<LienDeliberationRecord, InstanceRecord> LIEN_DELIBERATION__LIEN_DELIBERATION_INSTANCE_ID_FKEY = Internal.createForeignKey(LienDeliberationTable.LIEN_DELIBERATION, DSL.name("lien_deliberation_instance_id_fkey"), new TableField[] { LienDeliberationTable.LIEN_DELIBERATION.INSTANCE_ID }, Keys.INSTANCE_PKEY, new TableField[] { InstanceTable.INSTANCE.ID }, true);
    public static final ForeignKey<LienDeliberationRecord, OrganismeRecord> LIEN_DELIBERATION__LIEN_DELIBERATION_ORGANISME_ID_FKEY = Internal.createForeignKey(LienDeliberationTable.LIEN_DELIBERATION, DSL.name("lien_deliberation_organisme_id_fkey"), new TableField[] { LienDeliberationTable.LIEN_DELIBERATION.ORGANISME_ID }, Keys.ORGANISME_PKEY, new TableField[] { OrganismeTable.ORGANISME.ID }, true);
    public static final ForeignKey<MagicLinkTokenRecord, AppUserRecord> MAGIC_LINK_TOKEN__MAGIC_LINK_TOKEN_USER_ID_FKEY = Internal.createForeignKey(MagicLinkTokenTable.MAGIC_LINK_TOKEN, DSL.name("magic_link_token_user_id_fkey"), new TableField[] { MagicLinkTokenTable.MAGIC_LINK_TOKEN.USER_ID }, Keys.APP_USER_PKEY, new TableField[] { AppUserTable.APP_USER.ID }, true);
    public static final ForeignKey<MailLogRecord, DeploymentLogRecord> MAIL_LOG__MAIL_LOG_DEPLOYMENT_LOG_ID_FKEY = Internal.createForeignKey(MailLogTable.MAIL_LOG, DSL.name("mail_log_deployment_log_id_fkey"), new TableField[] { MailLogTable.MAIL_LOG.DEPLOYMENT_LOG_ID }, Keys.DEPLOYMENT_LOG_PKEY, new TableField[] { DeploymentLogTable.DEPLOYMENT_LOG.ID }, true);
    public static final ForeignKey<OrganismeRecord, NatureJuridiqueRecord> ORGANISME__ORGANISME_NATURE_JURIDIQUE_ID_FKEY = Internal.createForeignKey(OrganismeTable.ORGANISME, DSL.name("organisme_nature_juridique_id_fkey"), new TableField[] { OrganismeTable.ORGANISME.NATURE_JURIDIQUE_ID }, Keys.NATURE_JURIDIQUE_PKEY, new TableField[] { NatureJuridiqueTable.NATURE_JURIDIQUE.ID }, true);
    public static final ForeignKey<OrganismeRecord, SecteurRecord> ORGANISME__ORGANISME_SECTEUR_ID_FKEY = Internal.createForeignKey(OrganismeTable.ORGANISME, DSL.name("organisme_secteur_id_fkey"), new TableField[] { OrganismeTable.ORGANISME.SECTEUR_ID }, Keys.SECTEUR_PKEY, new TableField[] { SecteurTable.SECTEUR.ID }, true);
    public static final ForeignKey<OrganismeRecord, TypeStructureRecord> ORGANISME__ORGANISME_TYPE_STRUCTURE_ID_FKEY = Internal.createForeignKey(OrganismeTable.ORGANISME, DSL.name("organisme_type_structure_id_fkey"), new TableField[] { OrganismeTable.ORGANISME.TYPE_STRUCTURE_ID }, Keys.TYPE_STRUCTURE_PKEY, new TableField[] { TypeStructureTable.TYPE_STRUCTURE.ID }, true);
    public static final ForeignKey<RepresentantRecord, EluRecord> REPRESENTANT__REPRESENTANT_ELU_ID_FKEY = Internal.createForeignKey(RepresentantTable.REPRESENTANT, DSL.name("representant_elu_id_fkey"), new TableField[] { RepresentantTable.REPRESENTANT.ELU_ID }, Keys.ELU_PKEY, new TableField[] { EluTable.ELU.ID }, true);
    public static final ForeignKey<UserFileRecord, AppUserRecord> USER_FILE__USER_FILE_USER_ID_FKEY = Internal.createForeignKey(UserFileTable.USER_FILE, DSL.name("user_file_user_id_fkey"), new TableField[] { UserFileTable.USER_FILE.USER_ID }, Keys.APP_USER_PKEY, new TableField[] { AppUserTable.APP_USER.ID }, true);
    public static final ForeignKey<UserMailLogRecord, AppUserRecord> USER_MAIL_LOG__USER_MAIL_LOG_USER_ID_FKEY = Internal.createForeignKey(UserMailLogTable.USER_MAIL_LOG, DSL.name("user_mail_log_user_id_fkey"), new TableField[] { UserMailLogTable.USER_MAIL_LOG.USER_ID }, Keys.APP_USER_PKEY, new TableField[] { AppUserTable.APP_USER.ID }, true);
    public static final ForeignKey<UserSessionLogRecord, AppUserRecord> USER_SESSION_LOG__USER_SESSION_LOG_USER_ID_FKEY = Internal.createForeignKey(UserSessionLogTable.USER_SESSION_LOG, DSL.name("user_session_log_user_id_fkey"), new TableField[] { UserSessionLogTable.USER_SESSION_LOG.USER_ID }, Keys.APP_USER_PKEY, new TableField[] { AppUserTable.APP_USER.ID }, true);
}
