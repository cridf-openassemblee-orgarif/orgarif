/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import jooqutils.jooq.TimestampWithTimeZoneToInstantConverter;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.SuppleanceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SuppleanceTable extends TableImpl<SuppleanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.suppleance</code>
     */
    public static final SuppleanceTable SUPPLEANCE = new SuppleanceTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SuppleanceRecord> getRecordType() {
        return SuppleanceRecord.class;
    }

    /**
     * The column <code>public.suppleance.id</code>.
     */
    public final TableField<SuppleanceRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.suppleance.representant_id</code>.
     */
    public final TableField<SuppleanceRecord, UUID> REPRESENTANT_ID = createField(DSL.name("representant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.suppleance.representation_id</code>.
     */
    public final TableField<SuppleanceRecord, UUID> REPRESENTATION_ID = createField(DSL.name("representation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.suppleance.organisme_id</code>.
     */
    public final TableField<SuppleanceRecord, UUID> ORGANISME_ID = createField(DSL.name("organisme_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.suppleance.start_date</code>.
     */
    public final TableField<SuppleanceRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.suppleance.end_date</code>.
     */
    public final TableField<SuppleanceRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.suppleance.creation_date</code>.
     */
    public final TableField<SuppleanceRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    /**
     * The column <code>public.suppleance.status</code>.
     */
    public final TableField<SuppleanceRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.suppleance.last_modification_date</code>.
     */
    public final TableField<SuppleanceRecord, Instant> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    private SuppleanceTable(Name alias, Table<SuppleanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SuppleanceTable(Name alias, Table<SuppleanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.suppleance</code> table reference
     */
    public SuppleanceTable(String alias) {
        this(DSL.name(alias), SUPPLEANCE);
    }

    /**
     * Create an aliased <code>public.suppleance</code> table reference
     */
    public SuppleanceTable(Name alias) {
        this(alias, SUPPLEANCE);
    }

    /**
     * Create a <code>public.suppleance</code> table reference
     */
    public SuppleanceTable() {
        this(DSL.name("suppleance"), null);
    }

    public <O extends Record> SuppleanceTable(Table<O> child, ForeignKey<O, SuppleanceRecord> key) {
        super(child, key, SUPPLEANCE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUPPLEANCE_ORGANISME_ID_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<SuppleanceRecord> getPrimaryKey() {
        return Keys.SUPPLEANCE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<SuppleanceRecord>> getKeys() {
        return Arrays.<UniqueKey<SuppleanceRecord>>asList(Keys.SUPPLEANCE_PKEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<SuppleanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SuppleanceRecord, ?>>asList(Keys.SUPPLEANCE__SUPPLEANCE_REPRESENTANT_ID_FKEY, Keys.SUPPLEANCE__SUPPLEANCE_REPRESENTATION_ID_FKEY, Keys.SUPPLEANCE__SUPPLEANCE_ORGANISME_ID_FKEY);
    }

    private transient RepresentantTable _representant;
    private transient RepresentationTable _representation;
    private transient OrganismeTable _organisme;

    public RepresentantTable representant() {
        if (_representant == null)
            _representant = new RepresentantTable(this, Keys.SUPPLEANCE__SUPPLEANCE_REPRESENTANT_ID_FKEY);

        return _representant;
    }

    public RepresentationTable representation() {
        if (_representation == null)
            _representation = new RepresentationTable(this, Keys.SUPPLEANCE__SUPPLEANCE_REPRESENTATION_ID_FKEY);

        return _representation;
    }

    public OrganismeTable organisme() {
        if (_organisme == null)
            _organisme = new OrganismeTable(this, Keys.SUPPLEANCE__SUPPLEANCE_ORGANISME_ID_FKEY);

        return _organisme;
    }

    @Override
    @Nonnull
    public SuppleanceTable as(String alias) {
        return new SuppleanceTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public SuppleanceTable as(Name alias) {
        return new SuppleanceTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SuppleanceTable rename(String name) {
        return new SuppleanceTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SuppleanceTable rename(Name name) {
        return new SuppleanceTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row9<UUID, UUID, UUID, UUID, LocalDate, LocalDate, Instant, String, Instant> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
