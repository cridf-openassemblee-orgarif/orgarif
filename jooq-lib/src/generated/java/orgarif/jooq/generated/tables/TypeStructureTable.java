/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.TypeStructureRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeStructureTable extends TableImpl<TypeStructureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.type_structure</code>
     */
    public static final TypeStructureTable TYPE_STRUCTURE = new TypeStructureTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<TypeStructureRecord> getRecordType() {
        return TypeStructureRecord.class;
    }

    /**
     * The column <code>public.type_structure.id</code>.
     */
    public final TableField<TypeStructureRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.type_structure.libelle</code>.
     */
    public final TableField<TypeStructureRecord, String> LIBELLE = createField(DSL.name("libelle"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private TypeStructureTable(Name alias, Table<TypeStructureRecord> aliased) {
        this(alias, aliased, null);
    }

    private TypeStructureTable(Name alias, Table<TypeStructureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.type_structure</code> table reference
     */
    public TypeStructureTable(String alias) {
        this(DSL.name(alias), TYPE_STRUCTURE);
    }

    /**
     * Create an aliased <code>public.type_structure</code> table reference
     */
    public TypeStructureTable(Name alias) {
        this(alias, TYPE_STRUCTURE);
    }

    /**
     * Create a <code>public.type_structure</code> table reference
     */
    public TypeStructureTable() {
        this(DSL.name("type_structure"), null);
    }

    public <O extends Record> TypeStructureTable(Table<O> child, ForeignKey<O, TypeStructureRecord> key) {
        super(child, key, TYPE_STRUCTURE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<TypeStructureRecord> getPrimaryKey() {
        return Keys.TYPE_STRUCTURE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<TypeStructureRecord>> getKeys() {
        return Arrays.<UniqueKey<TypeStructureRecord>>asList(Keys.TYPE_STRUCTURE_PKEY);
    }

    @Override
    @Nonnull
    public TypeStructureTable as(String alias) {
        return new TypeStructureTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public TypeStructureTable as(Name alias) {
        return new TypeStructureTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public TypeStructureTable rename(String name) {
        return new TypeStructureTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public TypeStructureTable rename(Name name) {
        return new TypeStructureTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
