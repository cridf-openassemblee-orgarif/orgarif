/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import jooqutils.jooq.TimestampWithTimeZoneToInstantConverter;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.InstanceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InstanceTable extends TableImpl<InstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.instance</code>
     */
    public static final InstanceTable INSTANCE = new InstanceTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<InstanceRecord> getRecordType() {
        return InstanceRecord.class;
    }

    /**
     * The column <code>public.instance.id</code>.
     */
    public final TableField<InstanceRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.instance.nom</code>.
     */
    public final TableField<InstanceRecord, String> NOM = createField(DSL.name("nom"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.instance.organisme_id</code>.
     */
    public final TableField<InstanceRecord, UUID> ORGANISME_ID = createField(DSL.name("organisme_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.instance.nombre_representants</code>.
     */
    public final TableField<InstanceRecord, Integer> NOMBRE_REPRESENTANTS = createField(DSL.name("nombre_representants"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.instance.presence_suppleants</code>.
     */
    public final TableField<InstanceRecord, Boolean> PRESENCE_SUPPLEANTS = createField(DSL.name("presence_suppleants"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.instance.status</code>.
     */
    public final TableField<InstanceRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.instance.creation_date</code>.
     */
    public final TableField<InstanceRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    /**
     * The column <code>public.instance.last_modification_date</code>.
     */
    public final TableField<InstanceRecord, Instant> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    private InstanceTable(Name alias, Table<InstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private InstanceTable(Name alias, Table<InstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.instance</code> table reference
     */
    public InstanceTable(String alias) {
        this(DSL.name(alias), INSTANCE);
    }

    /**
     * Create an aliased <code>public.instance</code> table reference
     */
    public InstanceTable(Name alias) {
        this(alias, INSTANCE);
    }

    /**
     * Create a <code>public.instance</code> table reference
     */
    public InstanceTable() {
        this(DSL.name("instance"), null);
    }

    public <O extends Record> InstanceTable(Table<O> child, ForeignKey<O, InstanceRecord> key) {
        super(child, key, INSTANCE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INSTANCE_ORGANISME_ID_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<InstanceRecord> getPrimaryKey() {
        return Keys.INSTANCE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<InstanceRecord>> getKeys() {
        return Arrays.<UniqueKey<InstanceRecord>>asList(Keys.INSTANCE_PKEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<InstanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InstanceRecord, ?>>asList(Keys.INSTANCE__INSTANCE_ORGANISME_ID_FKEY);
    }

    private transient OrganismeTable _organisme;

    public OrganismeTable organisme() {
        if (_organisme == null)
            _organisme = new OrganismeTable(this, Keys.INSTANCE__INSTANCE_ORGANISME_ID_FKEY);

        return _organisme;
    }

    @Override
    @Nonnull
    public InstanceTable as(String alias) {
        return new InstanceTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public InstanceTable as(Name alias) {
        return new InstanceTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InstanceTable rename(String name) {
        return new InstanceTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public InstanceTable rename(Name name) {
        return new InstanceTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, String, UUID, Integer, Boolean, String, Instant, Instant> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
