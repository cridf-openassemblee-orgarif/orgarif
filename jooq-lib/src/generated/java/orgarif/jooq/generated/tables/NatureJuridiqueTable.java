/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import jooqutils.jooq.CharToUUIDConverter;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.OrgarifTable;
import orgarif.jooq.generated.tables.records.NatureJuridiqueRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NatureJuridiqueTable extends TableImpl<NatureJuridiqueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>orgarif.nature_juridique</code>
     */
    public static final NatureJuridiqueTable NATURE_JURIDIQUE = new NatureJuridiqueTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<NatureJuridiqueRecord> getRecordType() {
        return NatureJuridiqueRecord.class;
    }

    /**
     * The column <code>orgarif.nature_juridique.id</code>.
     */
    public final TableField<NatureJuridiqueRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.nature_juridique.libelle</code>.
     */
    public final TableField<NatureJuridiqueRecord, String> LIBELLE = createField(DSL.name("libelle"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private NatureJuridiqueTable(Name alias, Table<NatureJuridiqueRecord> aliased) {
        this(alias, aliased, null);
    }

    private NatureJuridiqueTable(Name alias, Table<NatureJuridiqueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>orgarif.nature_juridique</code> table reference
     */
    public NatureJuridiqueTable(String alias) {
        this(DSL.name(alias), NATURE_JURIDIQUE);
    }

    /**
     * Create an aliased <code>orgarif.nature_juridique</code> table reference
     */
    public NatureJuridiqueTable(Name alias) {
        this(alias, NATURE_JURIDIQUE);
    }

    /**
     * Create a <code>orgarif.nature_juridique</code> table reference
     */
    public NatureJuridiqueTable() {
        this(DSL.name("nature_juridique"), null);
    }

    public <O extends Record> NatureJuridiqueTable(Table<O> child, ForeignKey<O, NatureJuridiqueRecord> key) {
        super(child, key, NATURE_JURIDIQUE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return OrgarifTable.ORGARIF;
    }

    @Override
    @Nonnull
    public UniqueKey<NatureJuridiqueRecord> getPrimaryKey() {
        return Keys.KEY_NATURE_JURIDIQUE_PRIMARY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<NatureJuridiqueRecord>> getKeys() {
        return Arrays.<UniqueKey<NatureJuridiqueRecord>>asList(Keys.KEY_NATURE_JURIDIQUE_PRIMARY);
    }

    @Override
    @Nonnull
    public NatureJuridiqueTable as(String alias) {
        return new NatureJuridiqueTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public NatureJuridiqueTable as(Name alias) {
        return new NatureJuridiqueTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public NatureJuridiqueTable rename(String name) {
        return new NatureJuridiqueTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public NatureJuridiqueTable rename(Name name) {
        return new NatureJuridiqueTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
