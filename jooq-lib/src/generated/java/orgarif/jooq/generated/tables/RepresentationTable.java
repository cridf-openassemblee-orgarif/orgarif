/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import jooqutils.jooq.TimestampWithTimeZoneToInstantConverter;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.RepresentationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepresentationTable extends TableImpl<RepresentationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.representation</code>
     */
    public static final RepresentationTable REPRESENTATION = new RepresentationTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<RepresentationRecord> getRecordType() {
        return RepresentationRecord.class;
    }

    /**
     * The column <code>public.representation.id</code>.
     */
    public final TableField<RepresentationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.representation.representant_id</code>.
     */
    public final TableField<RepresentationRecord, UUID> REPRESENTANT_ID = createField(DSL.name("representant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.representation.organisme_id</code>.
     */
    public final TableField<RepresentationRecord, UUID> ORGANISME_ID = createField(DSL.name("organisme_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.representation.instance_id</code>.
     */
    public final TableField<RepresentationRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.representation.position</code>.
     */
    public final TableField<RepresentationRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.representation.start_date</code>.
     */
    public final TableField<RepresentationRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.representation.end_date</code>.
     */
    public final TableField<RepresentationRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.representation.status</code>.
     */
    public final TableField<RepresentationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.representation.creation_date</code>.
     */
    public final TableField<RepresentationRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    /**
     * The column <code>public.representation.last_modification_date</code>.
     */
    public final TableField<RepresentationRecord, Instant> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    private RepresentationTable(Name alias, Table<RepresentationRecord> aliased) {
        this(alias, aliased, null);
    }

    private RepresentationTable(Name alias, Table<RepresentationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.representation</code> table reference
     */
    public RepresentationTable(String alias) {
        this(DSL.name(alias), REPRESENTATION);
    }

    /**
     * Create an aliased <code>public.representation</code> table reference
     */
    public RepresentationTable(Name alias) {
        this(alias, REPRESENTATION);
    }

    /**
     * Create a <code>public.representation</code> table reference
     */
    public RepresentationTable() {
        this(DSL.name("representation"), null);
    }

    public <O extends Record> RepresentationTable(Table<O> child, ForeignKey<O, RepresentationRecord> key) {
        super(child, key, REPRESENTATION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REPRESENTATION_INSTANCE_ID_IDX, Indexes.REPRESENTATION_ORGANISME_ID_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<RepresentationRecord> getPrimaryKey() {
        return Keys.REPRESENTATION_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<RepresentationRecord>> getKeys() {
        return Arrays.<UniqueKey<RepresentationRecord>>asList(Keys.REPRESENTATION_PKEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<RepresentationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RepresentationRecord, ?>>asList(Keys.REPRESENTATION__REPRESENTATION_REPRESENTANT_ID_FKEY, Keys.REPRESENTATION__REPRESENTATION_ORGANISME_ID_FKEY, Keys.REPRESENTATION__REPRESENTATION_INSTANCE_ID_FKEY);
    }

    private transient RepresentantTable _representant;
    private transient OrganismeTable _organisme;
    private transient InstanceTable _instance;

    public RepresentantTable representant() {
        if (_representant == null)
            _representant = new RepresentantTable(this, Keys.REPRESENTATION__REPRESENTATION_REPRESENTANT_ID_FKEY);

        return _representant;
    }

    public OrganismeTable organisme() {
        if (_organisme == null)
            _organisme = new OrganismeTable(this, Keys.REPRESENTATION__REPRESENTATION_ORGANISME_ID_FKEY);

        return _organisme;
    }

    public InstanceTable instance() {
        if (_instance == null)
            _instance = new InstanceTable(this, Keys.REPRESENTATION__REPRESENTATION_INSTANCE_ID_FKEY);

        return _instance;
    }

    @Override
    @Nonnull
    public RepresentationTable as(String alias) {
        return new RepresentationTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public RepresentationTable as(Name alias) {
        return new RepresentationTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RepresentationTable rename(String name) {
        return new RepresentationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RepresentationTable rename(Name name) {
        return new RepresentationTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, UUID, UUID, UUID, Integer, LocalDate, LocalDate, String, Instant, Instant> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
