/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.FormerMailRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import jooqutils.jooq.TimestampWithTimeZoneToInstantConverter;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormerMailTable extends TableImpl<FormerMailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.former_mail</code>
     */
    public static final FormerMailTable FORMER_MAIL = new FormerMailTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<FormerMailRecord> getRecordType() {
        return FormerMailRecord.class;
    }

    /**
     * The column <code>public.former_mail.id</code>.
     */
    public final TableField<FormerMailRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.former_mail.user_id</code>.
     */
    public final TableField<FormerMailRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.former_mail.mail</code>.
     */
    public final TableField<FormerMailRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.former_mail.dirty_mail</code>.
     */
    public final TableField<FormerMailRecord, String> DIRTY_MAIL = createField(DSL.name("dirty_mail"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.former_mail.creation_date</code>.
     */
    public final TableField<FormerMailRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantConverter());

    private FormerMailTable(Name alias, Table<FormerMailRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormerMailTable(Name alias, Table<FormerMailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.former_mail</code> table reference
     */
    public FormerMailTable(String alias) {
        this(DSL.name(alias), FORMER_MAIL);
    }

    /**
     * Create an aliased <code>public.former_mail</code> table reference
     */
    public FormerMailTable(Name alias) {
        this(alias, FORMER_MAIL);
    }

    /**
     * Create a <code>public.former_mail</code> table reference
     */
    public FormerMailTable() {
        this(DSL.name("former_mail"), null);
    }

    public <O extends Record> FormerMailTable(Table<O> child, ForeignKey<O, FormerMailRecord> key) {
        super(child, key, FORMER_MAIL);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FORMER_MAIL_USER_ID_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<FormerMailRecord> getPrimaryKey() {
        return Keys.FORMER_MAIL_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<FormerMailRecord>> getKeys() {
        return Arrays.<UniqueKey<FormerMailRecord>>asList(Keys.FORMER_MAIL_PKEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<FormerMailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FormerMailRecord, ?>>asList(Keys.FORMER_MAIL__FORMER_MAIL_USER_ID_FKEY);
    }

    private transient AppUserTable _appUser;

    public AppUserTable appUser() {
        if (_appUser == null)
            _appUser = new AppUserTable(this, Keys.FORMER_MAIL__FORMER_MAIL_USER_ID_FKEY);

        return _appUser;
    }

    @Override
    @Nonnull
    public FormerMailTable as(String alias) {
        return new FormerMailTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public FormerMailTable as(Name alias) {
        return new FormerMailTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public FormerMailTable rename(String name) {
        return new FormerMailTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public FormerMailTable rename(Name name) {
        return new FormerMailTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<UUID, UUID, String, String, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
