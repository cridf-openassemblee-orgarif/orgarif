/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.OrgarifTable;
import orgarif.jooq.generated.tables.records.AppUserRecord;
import orgarif.jooq.tools.jooq.CharToUUIDConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppUserTable extends TableImpl<AppUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>orgarif.app_user</code>
     */
    public static final AppUserTable APP_USER = new AppUserTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AppUserRecord> getRecordType() {
        return AppUserRecord.class;
    }

    /**
     * The column <code>orgarif.app_user.id</code>.
     */
    public final TableField<AppUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.app_user.mail</code>.
     */
    public final TableField<AppUserRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>orgarif.app_user.password</code>.
     */
    public final TableField<AppUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>orgarif.app_user.username</code>.
     */
    public final TableField<AppUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>orgarif.app_user.language</code>.
     */
    public final TableField<AppUserRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>orgarif.app_user.admin</code>.
     */
    public final TableField<AppUserRecord, Boolean> ADMIN = createField(DSL.name("admin"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>orgarif.app_user.signup_date</code>.
     */
    public final TableField<AppUserRecord, LocalDateTime> SIGNUP_DATE = createField(DSL.name("signup_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>orgarif.app_user.dirty_mail</code>.
     */
    public final TableField<AppUserRecord, String> DIRTY_MAIL = createField(DSL.name("dirty_mail"), SQLDataType.VARCHAR(255), this, "");

    private AppUserTable(Name alias, Table<AppUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppUserTable(Name alias, Table<AppUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>orgarif.app_user</code> table reference
     */
    public AppUserTable(String alias) {
        this(DSL.name(alias), APP_USER);
    }

    /**
     * Create an aliased <code>orgarif.app_user</code> table reference
     */
    public AppUserTable(Name alias) {
        this(alias, APP_USER);
    }

    /**
     * Create a <code>orgarif.app_user</code> table reference
     */
    public AppUserTable() {
        this(DSL.name("app_user"), null);
    }

    public <O extends Record> AppUserTable(Table<O> child, ForeignKey<O, AppUserRecord> key) {
        super(child, key, APP_USER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return OrgarifTable.ORGARIF;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_USER_APP_USER_MAIL_IDX, Indexes.APP_USER_APP_USER_USERNAME_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<AppUserRecord> getPrimaryKey() {
        return Keys.KEY_APP_USER_PRIMARY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<AppUserRecord>> getKeys() {
        return Arrays.<UniqueKey<AppUserRecord>>asList(Keys.KEY_APP_USER_PRIMARY, Keys.KEY_APP_USER_MAIL, Keys.KEY_APP_USER_USERNAME);
    }

    @Override
    @Nonnull
    public AppUserTable as(String alias) {
        return new AppUserTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public AppUserTable as(Name alias) {
        return new AppUserTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AppUserTable rename(String name) {
        return new AppUserTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AppUserTable rename(Name name) {
        return new AppUserTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, String, String, String, String, Boolean, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
