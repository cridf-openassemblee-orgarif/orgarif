/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.OrgarifTable;
import orgarif.jooq.generated.tables.records.OrganismeDeliberationRecord;
import orgarif.jooq.tools.jooq.CharToUUIDConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganismeDeliberationTable extends TableImpl<OrganismeDeliberationRecord> {

    private static final long serialVersionUID = -2008455812;

    /**
     * The reference instance of <code>orgarif.organisme_deliberation</code>
     */
    public static final OrganismeDeliberationTable ORGANISME_DELIBERATION = new OrganismeDeliberationTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganismeDeliberationRecord> getRecordType() {
        return OrganismeDeliberationRecord.class;
    }

    /**
     * The column <code>orgarif.organisme_deliberation.id</code>.
     */
    public final TableField<OrganismeDeliberationRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.organisme_deliberation.organisme_id</code>.
     */
    public final TableField<OrganismeDeliberationRecord, UUID> ORGANISME_ID = createField(DSL.name("organisme_id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.organisme_deliberation.deliberation_id</code>.
     */
    public final TableField<OrganismeDeliberationRecord, UUID> DELIBERATION_ID = createField(DSL.name("deliberation_id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * Create a <code>orgarif.organisme_deliberation</code> table reference
     */
    public OrganismeDeliberationTable() {
        this(DSL.name("organisme_deliberation"), null);
    }

    /**
     * Create an aliased <code>orgarif.organisme_deliberation</code> table reference
     */
    public OrganismeDeliberationTable(String alias) {
        this(DSL.name(alias), ORGANISME_DELIBERATION);
    }

    /**
     * Create an aliased <code>orgarif.organisme_deliberation</code> table reference
     */
    public OrganismeDeliberationTable(Name alias) {
        this(alias, ORGANISME_DELIBERATION);
    }

    private OrganismeDeliberationTable(Name alias, Table<OrganismeDeliberationRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrganismeDeliberationTable(Name alias, Table<OrganismeDeliberationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OrganismeDeliberationTable(Table<O> child, ForeignKey<O, OrganismeDeliberationRecord> key) {
        super(child, key, ORGANISME_DELIBERATION);
    }

    @Override
    public Schema getSchema() {
        return OrgarifTable.ORGARIF;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORGANISME_DELIBERATION_DELIBERATION_ID, Indexes.ORGANISME_DELIBERATION_ORGANISME_ID);
    }

    @Override
    public UniqueKey<OrganismeDeliberationRecord> getPrimaryKey() {
        return Keys.KEY_ORGANISME_DELIBERATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrganismeDeliberationRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganismeDeliberationRecord>>asList(Keys.KEY_ORGANISME_DELIBERATION_PRIMARY);
    }

    @Override
    public List<ForeignKey<OrganismeDeliberationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrganismeDeliberationRecord, ?>>asList(Keys.ORGANISME_DELIBERATION_IBFK_1, Keys.ORGANISME_DELIBERATION_IBFK_2);
    }

    public OrganismeTable organisme() {
        return new OrganismeTable(this, Keys.ORGANISME_DELIBERATION_IBFK_1);
    }

    public DeliberationTable deliberation() {
        return new DeliberationTable(this, Keys.ORGANISME_DELIBERATION_IBFK_2);
    }

    @Override
    public OrganismeDeliberationTable as(String alias) {
        return new OrganismeDeliberationTable(DSL.name(alias), this);
    }

    @Override
    public OrganismeDeliberationTable as(Name alias) {
        return new OrganismeDeliberationTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganismeDeliberationTable rename(String name) {
        return new OrganismeDeliberationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganismeDeliberationTable rename(Name name) {
        return new OrganismeDeliberationTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
