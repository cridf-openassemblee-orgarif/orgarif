/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.OrgarifTable;
import orgarif.jooq.generated.tables.records.RepresentantInstanceRecord;
import orgarif.jooq.tools.jooq.CharToUUIDConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepresentantInstanceTable extends TableImpl<RepresentantInstanceRecord> {

    private static final long serialVersionUID = 490192647;

    /**
     * The reference instance of <code>orgarif.representant_instance</code>
     */
    public static final RepresentantInstanceTable REPRESENTANT_INSTANCE = new RepresentantInstanceTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepresentantInstanceRecord> getRecordType() {
        return RepresentantInstanceRecord.class;
    }

    /**
     * The column <code>orgarif.representant_instance.id</code>.
     */
    public final TableField<RepresentantInstanceRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant_instance.elu_id</code>.
     */
    public final TableField<RepresentantInstanceRecord, UUID> ELU_ID = createField(DSL.name("elu_id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant_instance.instance_id</code>.
     */
    public final TableField<RepresentantInstanceRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant_instance.position</code>.
     */
    public final TableField<RepresentantInstanceRecord, Integer> POSITION = createField(DSL.name("position"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>orgarif.representant_instance.is_suppleant</code>.
     */
    public final TableField<RepresentantInstanceRecord, Boolean> IS_SUPPLEANT = createField(DSL.name("is_suppleant"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>orgarif.representant_instance.creation_date</code>.
     */
    public final TableField<RepresentantInstanceRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>orgarif.representant_instance.last_modification_date</code>.
     */
    public final TableField<RepresentantInstanceRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>orgarif.representant_instance</code> table reference
     */
    public RepresentantInstanceTable() {
        this(DSL.name("representant_instance"), null);
    }

    /**
     * Create an aliased <code>orgarif.representant_instance</code> table reference
     */
    public RepresentantInstanceTable(String alias) {
        this(DSL.name(alias), REPRESENTANT_INSTANCE);
    }

    /**
     * Create an aliased <code>orgarif.representant_instance</code> table reference
     */
    public RepresentantInstanceTable(Name alias) {
        this(alias, REPRESENTANT_INSTANCE);
    }

    private RepresentantInstanceTable(Name alias, Table<RepresentantInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private RepresentantInstanceTable(Name alias, Table<RepresentantInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RepresentantInstanceTable(Table<O> child, ForeignKey<O, RepresentantInstanceRecord> key) {
        super(child, key, REPRESENTANT_INSTANCE);
    }

    @Override
    public Schema getSchema() {
        return OrgarifTable.ORGARIF;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REPRESENTANT_INSTANCE_ELU_ID, Indexes.REPRESENTANT_INSTANCE_REPRESENTANT_INSTANCE_INSTANCE_ID_IDX);
    }

    @Override
    public UniqueKey<RepresentantInstanceRecord> getPrimaryKey() {
        return Keys.KEY_REPRESENTANT_INSTANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RepresentantInstanceRecord>> getKeys() {
        return Arrays.<UniqueKey<RepresentantInstanceRecord>>asList(Keys.KEY_REPRESENTANT_INSTANCE_PRIMARY);
    }

    @Override
    public List<ForeignKey<RepresentantInstanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RepresentantInstanceRecord, ?>>asList(Keys.REPRESENTANT_INSTANCE_IBFK_1, Keys.REPRESENTANT_INSTANCE_IBFK_2);
    }

    public EluTable elu() {
        return new EluTable(this, Keys.REPRESENTANT_INSTANCE_IBFK_1);
    }

    public InstanceTable instance() {
        return new InstanceTable(this, Keys.REPRESENTANT_INSTANCE_IBFK_2);
    }

    @Override
    public RepresentantInstanceTable as(String alias) {
        return new RepresentantInstanceTable(DSL.name(alias), this);
    }

    @Override
    public RepresentantInstanceTable as(Name alias) {
        return new RepresentantInstanceTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RepresentantInstanceTable rename(String name) {
        return new RepresentantInstanceTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RepresentantInstanceTable rename(Name name) {
        return new RepresentantInstanceTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, Integer, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
