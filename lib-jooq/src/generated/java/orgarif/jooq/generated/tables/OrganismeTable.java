/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.OrgarifTable;
import orgarif.jooq.generated.tables.records.OrganismeRecord;
import orgarif.jooq.tools.jooq.CharToUUIDConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganismeTable extends TableImpl<OrganismeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>orgarif.organisme</code>
     */
    public static final OrganismeTable ORGANISME = new OrganismeTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<OrganismeRecord> getRecordType() {
        return OrganismeRecord.class;
    }

    /**
     * The column <code>orgarif.organisme.id</code>.
     */
    public final TableField<OrganismeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.organisme.nom</code>.
     */
    public final TableField<OrganismeRecord, String> NOM = createField(DSL.name("nom"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>orgarif.organisme.secteur_id</code>.
     */
    public final TableField<OrganismeRecord, UUID> SECTEUR_ID = createField(DSL.name("secteur_id"), SQLDataType.CHAR(32), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.organisme.nature_juridique_id</code>.
     */
    public final TableField<OrganismeRecord, UUID> NATURE_JURIDIQUE_ID = createField(DSL.name("nature_juridique_id"), SQLDataType.CHAR(32), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.organisme.type_structure_id</code>.
     */
    public final TableField<OrganismeRecord, UUID> TYPE_STRUCTURE_ID = createField(DSL.name("type_structure_id"), SQLDataType.CHAR(32), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.organisme.nombre_representants</code>.
     */
    public final TableField<OrganismeRecord, Integer> NOMBRE_REPRESENTANTS = createField(DSL.name("nombre_representants"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>orgarif.organisme.nombre_suppleants</code>.
     */
    public final TableField<OrganismeRecord, Integer> NOMBRE_SUPPLEANTS = createField(DSL.name("nombre_suppleants"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>orgarif.organisme.partage_representants</code>.
     */
    public final TableField<OrganismeRecord, Boolean> PARTAGE_REPRESENTANTS = createField(DSL.name("partage_representants"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>orgarif.organisme.creation_date</code>.
     */
    public final TableField<OrganismeRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>orgarif.organisme.last_modification_date</code>.
     */
    public final TableField<OrganismeRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private OrganismeTable(Name alias, Table<OrganismeRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrganismeTable(Name alias, Table<OrganismeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>orgarif.organisme</code> table reference
     */
    public OrganismeTable(String alias) {
        this(DSL.name(alias), ORGANISME);
    }

    /**
     * Create an aliased <code>orgarif.organisme</code> table reference
     */
    public OrganismeTable(Name alias) {
        this(alias, ORGANISME);
    }

    /**
     * Create a <code>orgarif.organisme</code> table reference
     */
    public OrganismeTable() {
        this(DSL.name("organisme"), null);
    }

    public <O extends Record> OrganismeTable(Table<O> child, ForeignKey<O, OrganismeRecord> key) {
        super(child, key, ORGANISME);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return OrgarifTable.ORGARIF;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORGANISME_NATURE_JURIDIQUE_ID, Indexes.ORGANISME_SECTEUR_ID, Indexes.ORGANISME_TYPE_STRUCTURE_ID);
    }

    @Override
    @Nonnull
    public UniqueKey<OrganismeRecord> getPrimaryKey() {
        return Keys.KEY_ORGANISME_PRIMARY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<OrganismeRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganismeRecord>>asList(Keys.KEY_ORGANISME_PRIMARY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<OrganismeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrganismeRecord, ?>>asList(Keys.ORGANISME_IBFK_1, Keys.ORGANISME_IBFK_2, Keys.ORGANISME_IBFK_3);
    }

    public SecteurTable secteur() {
        return new SecteurTable(this, Keys.ORGANISME_IBFK_1);
    }

    public NatureJuridiqueTable natureJuridique() {
        return new NatureJuridiqueTable(this, Keys.ORGANISME_IBFK_2);
    }

    public TypeStructureTable typeStructure() {
        return new TypeStructureTable(this, Keys.ORGANISME_IBFK_3);
    }

    @Override
    @Nonnull
    public OrganismeTable as(String alias) {
        return new OrganismeTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public OrganismeTable as(Name alias) {
        return new OrganismeTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public OrganismeTable rename(String name) {
        return new OrganismeTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public OrganismeTable rename(Name name) {
        return new OrganismeTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, String, UUID, UUID, UUID, Integer, Integer, Boolean, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
