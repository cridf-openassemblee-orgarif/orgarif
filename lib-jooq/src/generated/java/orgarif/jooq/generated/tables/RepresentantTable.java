/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.OrgarifTable;
import orgarif.jooq.generated.tables.records.RepresentantRecord;
import orgarif.jooq.tools.jooq.CharToUUIDConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepresentantTable extends TableImpl<RepresentantRecord> {

    private static final long serialVersionUID = 149536411;

    /**
     * The reference instance of <code>orgarif.representant</code>
     */
    public static final RepresentantTable REPRESENTANT = new RepresentantTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepresentantRecord> getRecordType() {
        return RepresentantRecord.class;
    }

    /**
     * The column <code>orgarif.representant.id</code>.
     */
    public final TableField<RepresentantRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant.elu_id</code>.
     */
    public final TableField<RepresentantRecord, UUID> ELU_ID = createField(DSL.name("elu_id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant.organisme_id</code>.
     */
    public final TableField<RepresentantRecord, UUID> ORGANISME_ID = createField(DSL.name("organisme_id"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant.instance_id</code>.
     */
    public final TableField<RepresentantRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), org.jooq.impl.SQLDataType.CHAR(32), this, "", new CharToUUIDConverter());

    /**
     * The column <code>orgarif.representant.position</code>.
     */
    public final TableField<RepresentantRecord, Integer> POSITION = createField(DSL.name("position"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>orgarif.representant.representant_or_suppleant</code>.
     */
    public final TableField<RepresentantRecord, String> REPRESENTANT_OR_SUPPLEANT = createField(DSL.name("representant_or_suppleant"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>orgarif.representant.creation_date</code>.
     */
    public final TableField<RepresentantRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>orgarif.representant.last_modification_date</code>.
     */
    public final TableField<RepresentantRecord, LocalDateTime> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>orgarif.representant</code> table reference
     */
    public RepresentantTable() {
        this(DSL.name("representant"), null);
    }

    /**
     * Create an aliased <code>orgarif.representant</code> table reference
     */
    public RepresentantTable(String alias) {
        this(DSL.name(alias), REPRESENTANT);
    }

    /**
     * Create an aliased <code>orgarif.representant</code> table reference
     */
    public RepresentantTable(Name alias) {
        this(alias, REPRESENTANT);
    }

    private RepresentantTable(Name alias, Table<RepresentantRecord> aliased) {
        this(alias, aliased, null);
    }

    private RepresentantTable(Name alias, Table<RepresentantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RepresentantTable(Table<O> child, ForeignKey<O, RepresentantRecord> key) {
        super(child, key, REPRESENTANT);
    }

    @Override
    public Schema getSchema() {
        return OrgarifTable.ORGARIF;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REPRESENTANT_ELU_ID, Indexes.REPRESENTANT_REPRESENTANT_INSTANCE_ID_IDX, Indexes.REPRESENTANT_REPRESENTANT_ORGANISME_ID_IDX);
    }

    @Override
    public UniqueKey<RepresentantRecord> getPrimaryKey() {
        return Keys.KEY_REPRESENTANT_PRIMARY;
    }

    @Override
    public List<UniqueKey<RepresentantRecord>> getKeys() {
        return Arrays.<UniqueKey<RepresentantRecord>>asList(Keys.KEY_REPRESENTANT_PRIMARY);
    }

    @Override
    public List<ForeignKey<RepresentantRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RepresentantRecord, ?>>asList(Keys.REPRESENTANT_IBFK_1, Keys.REPRESENTANT_IBFK_2, Keys.REPRESENTANT_IBFK_3);
    }

    public EluTable elu() {
        return new EluTable(this, Keys.REPRESENTANT_IBFK_1);
    }

    public OrganismeTable organisme() {
        return new OrganismeTable(this, Keys.REPRESENTANT_IBFK_2);
    }

    public InstanceTable instance() {
        return new InstanceTable(this, Keys.REPRESENTANT_IBFK_3);
    }

    @Override
    public RepresentantTable as(String alias) {
        return new RepresentantTable(DSL.name(alias), this);
    }

    @Override
    public RepresentantTable as(Name alias) {
        return new RepresentantTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RepresentantTable rename(String name) {
        return new RepresentantTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RepresentantTable rename(Name name) {
        return new RepresentantTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, UUID, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
