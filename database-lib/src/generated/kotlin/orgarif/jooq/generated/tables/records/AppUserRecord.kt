/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables.records


import java.time.Instant
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl

import orgarif.jooq.generated.tables.AppUserTable


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AppUserRecord private constructor() : UpdatableRecordImpl<AppUserRecord>(AppUserTable.APP_USER), Record8<UUID?, String?, String?, String?, String?, Array<String?>?, Instant?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var mail: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var password: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var displayName: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var language: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var roles: Array<String?>
        set(value): Unit = set(5, value)
        get(): Array<String?> = get(5) as Array<String?>

    open var signupDate: Instant
        set(value): Unit = set(6, value)
        get(): Instant = get(6) as Instant

    open var lastUpdate: Instant
        set(value): Unit = set(7, value)
        get(): Instant = get(7) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<UUID?, String?, String?, String?, String?, Array<String?>?, Instant?, Instant?> = super.fieldsRow() as Row8<UUID?, String?, String?, String?, String?, Array<String?>?, Instant?, Instant?>
    override fun valuesRow(): Row8<UUID?, String?, String?, String?, String?, Array<String?>?, Instant?, Instant?> = super.valuesRow() as Row8<UUID?, String?, String?, String?, String?, Array<String?>?, Instant?, Instant?>
    override fun field1(): Field<UUID?> = AppUserTable.APP_USER.ID
    override fun field2(): Field<String?> = AppUserTable.APP_USER.MAIL
    override fun field3(): Field<String?> = AppUserTable.APP_USER.PASSWORD
    override fun field4(): Field<String?> = AppUserTable.APP_USER.DISPLAY_NAME
    override fun field5(): Field<String?> = AppUserTable.APP_USER.LANGUAGE
    override fun field6(): Field<Array<String?>?> = AppUserTable.APP_USER.ROLES
    override fun field7(): Field<Instant?> = AppUserTable.APP_USER.SIGNUP_DATE
    override fun field8(): Field<Instant?> = AppUserTable.APP_USER.LAST_UPDATE
    override fun component1(): UUID = id
    override fun component2(): String = mail
    override fun component3(): String = password
    override fun component4(): String = displayName
    override fun component5(): String = language
    override fun component6(): Array<String?> = roles
    override fun component7(): Instant = signupDate
    override fun component8(): Instant = lastUpdate
    override fun value1(): UUID = id
    override fun value2(): String = mail
    override fun value3(): String = password
    override fun value4(): String = displayName
    override fun value5(): String = language
    override fun value6(): Array<String?> = roles
    override fun value7(): Instant = signupDate
    override fun value8(): Instant = lastUpdate

    override fun value1(value: UUID?): AppUserRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): AppUserRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): AppUserRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): AppUserRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): AppUserRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Array<String?>?): AppUserRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Instant?): AppUserRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Instant?): AppUserRecord {
        set(7, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?, value4: String?, value5: String?, value6: Array<String?>?, value7: Instant?, value8: Instant?): AppUserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AppUserRecord
     */
    constructor(id: UUID, mail: String, password: String, displayName: String, language: String, roles: Array<String?>, signupDate: Instant, lastUpdate: Instant): this() {
        this.id = id
        this.mail = mail
        this.password = password
        this.displayName = displayName
        this.language = language
        this.roles = roles
        this.signupDate = signupDate
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }
}
