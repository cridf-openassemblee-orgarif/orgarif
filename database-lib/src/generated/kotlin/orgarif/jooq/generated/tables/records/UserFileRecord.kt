/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables.records

import java.time.Instant
import java.util.UUID
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import orgarif.jooq.generated.tables.UserFileTable

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class UserFileRecord private constructor() :
    UpdatableRecordImpl<UserFileRecord>(UserFileTable.USER_FILE),
    Record6<UUID?, UUID?, ByteArray?, String?, String?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var userId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var fileContent: ByteArray
        set(value): Unit = set(2, value)
        get(): ByteArray = get(2) as ByteArray

    open var contentType: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var originalFilename: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var uploadDate: Instant
        set(value): Unit = set(5, value)
        get(): Instant = get(5) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<UUID?, UUID?, ByteArray?, String?, String?, Instant?> =
        super.fieldsRow() as Row6<UUID?, UUID?, ByteArray?, String?, String?, Instant?>
    override fun valuesRow(): Row6<UUID?, UUID?, ByteArray?, String?, String?, Instant?> =
        super.valuesRow() as Row6<UUID?, UUID?, ByteArray?, String?, String?, Instant?>
    override fun field1(): Field<UUID?> = UserFileTable.USER_FILE.ID
    override fun field2(): Field<UUID?> = UserFileTable.USER_FILE.USER_ID
    override fun field3(): Field<ByteArray?> = UserFileTable.USER_FILE.FILE_CONTENT
    override fun field4(): Field<String?> = UserFileTable.USER_FILE.CONTENT_TYPE
    override fun field5(): Field<String?> = UserFileTable.USER_FILE.ORIGINAL_FILENAME
    override fun field6(): Field<Instant?> = UserFileTable.USER_FILE.UPLOAD_DATE
    override fun component1(): UUID = id
    override fun component2(): UUID = userId
    override fun component3(): ByteArray = fileContent
    override fun component4(): String = contentType
    override fun component5(): String = originalFilename
    override fun component6(): Instant = uploadDate
    override fun value1(): UUID = id
    override fun value2(): UUID = userId
    override fun value3(): ByteArray = fileContent
    override fun value4(): String = contentType
    override fun value5(): String = originalFilename
    override fun value6(): Instant = uploadDate

    override fun value1(value: UUID?): UserFileRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): UserFileRecord {
        set(1, value)
        return this
    }

    override fun value3(value: ByteArray?): UserFileRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserFileRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): UserFileRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Instant?): UserFileRecord {
        set(5, value)
        return this
    }

    override fun values(
        value1: UUID?,
        value2: UUID?,
        value3: ByteArray?,
        value4: String?,
        value5: String?,
        value6: Instant?
    ): UserFileRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /** Create a detached, initialised UserFileRecord */
    constructor(
        id: UUID,
        userId: UUID,
        fileContent: ByteArray,
        contentType: String,
        originalFilename: String,
        uploadDate: Instant
    ) : this() {
        this.id = id
        this.userId = userId
        this.fileContent = fileContent
        this.contentType = contentType
        this.originalFilename = originalFilename
        this.uploadDate = uploadDate
        resetChangedOnNotNull()
    }
}
