/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables


import java.time.Instant
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row13
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import orgarif.jooq.generated.PublicTable
import orgarif.jooq.generated.keys.COMMAND_LOG_PKEY
import orgarif.jooq.generated.keys.COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY
import orgarif.jooq.generated.tables.records.CommandLogRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CommandLogTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CommandLogRecord>?,
    aliased: Table<CommandLogRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CommandLogRecord>(
    alias,
    PublicTable.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.command_log</code>
         */
        val COMMAND_LOG: CommandLogTable = CommandLogTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CommandLogRecord> = CommandLogRecord::class.java

    /**
     * The column <code>public.command_log.id</code>.
     */
    val ID: TableField<CommandLogRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.command_log.user_id</code>.
     */
    val USER_ID: TableField<CommandLogRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.command_log.affected_user_id</code>.
     */
    val AFFECTED_USER_ID: TableField<CommandLogRecord, UUID?> = createField(DSL.name("affected_user_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.command_log.deployment_log_id</code>.
     */
    val DEPLOYMENT_LOG_ID: TableField<CommandLogRecord, UUID?> = createField(DSL.name("deployment_log_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.command_log.command_class</code>.
     */
    val COMMAND_CLASS: TableField<CommandLogRecord, String?> = createField(DSL.name("command_class"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.command_log.json_command</code>.
     */
    val JSON_COMMAND: TableField<CommandLogRecord, String?> = createField(DSL.name("json_command"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.command_log.ip</code>.
     */
    val IP: TableField<CommandLogRecord, String?> = createField(DSL.name("ip"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.command_log.user_session_id</code>.
     */
    val USER_SESSION_ID: TableField<CommandLogRecord, UUID?> = createField(DSL.name("user_session_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.command_log.ids_log</code>.
     */
    val IDS_LOG: TableField<CommandLogRecord, String?> = createField(DSL.name("ids_log"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.command_log.json_result</code>.
     */
    val JSON_RESULT: TableField<CommandLogRecord, String?> = createField(DSL.name("json_result"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.command_log.exception_stack_trace</code>.
     */
    val EXCEPTION_STACK_TRACE: TableField<CommandLogRecord, String?> = createField(DSL.name("exception_stack_trace"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.command_log.start_date</code>.
     */
    val START_DATE: TableField<CommandLogRecord, Instant?> = createField(DSL.name("start_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", TimestampWithTimeZoneToInstantJooqConverter())

    /**
     * The column <code>public.command_log.end_date</code>.
     */
    val END_DATE: TableField<CommandLogRecord, Instant?> = createField(DSL.name("end_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(alias: Name, aliased: Table<CommandLogRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CommandLogRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.command_log</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.command_log</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.command_log</code> table reference
     */
    constructor(): this(DSL.name("command_log"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CommandLogRecord>): this(Internal.createPathAlias(child, key), child, key, COMMAND_LOG, null)
    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC
    override fun getPrimaryKey(): UniqueKey<CommandLogRecord> = COMMAND_LOG_PKEY
    override fun getReferences(): List<ForeignKey<CommandLogRecord, *>> = listOf(COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY)

    private lateinit var _deploymentLog: DeploymentLogTable

    /**
     * Get the implicit join path to the <code>public.deployment_log</code>
     * table.
     */
    fun deploymentLog(): DeploymentLogTable {
        if (!this::_deploymentLog.isInitialized)
            _deploymentLog = DeploymentLogTable(this, COMMAND_LOG__COMMAND_LOG_DEPLOYMENT_LOG_ID_FKEY)

        return _deploymentLog;
    }

    val deploymentLog: DeploymentLogTable
        get(): DeploymentLogTable = deploymentLog()
    override fun `as`(alias: String): CommandLogTable = CommandLogTable(DSL.name(alias), this)
    override fun `as`(alias: Name): CommandLogTable = CommandLogTable(alias, this)
    override fun `as`(alias: Table<*>): CommandLogTable = CommandLogTable(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CommandLogTable = CommandLogTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CommandLogTable = CommandLogTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CommandLogTable = CommandLogTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row13<UUID?, UUID?, UUID?, UUID?, String?, String?, String?, UUID?, String?, String?, String?, Instant?, Instant?> = super.fieldsRow() as Row13<UUID?, UUID?, UUID?, UUID?, String?, String?, String?, UUID?, String?, String?, String?, Instant?, Instant?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, UUID?, UUID?, String?, String?, String?, UUID?, String?, String?, String?, Instant?, Instant?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, UUID?, UUID?, String?, String?, String?, UUID?, String?, String?, String?, Instant?, Instant?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
