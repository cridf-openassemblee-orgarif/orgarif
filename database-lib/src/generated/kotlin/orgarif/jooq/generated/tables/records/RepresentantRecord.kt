/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables.records


import java.time.Instant
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl

import orgarif.jooq.generated.tables.RepresentantTable


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RepresentantRecord private constructor() : UpdatableRecordImpl<RepresentantRecord>(RepresentantTable.REPRESENTANT), Record8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var eluId: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    open var prenom: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var nom: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var searchPrenom: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var searchNom: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    open var creationDate: Instant
        set(value): Unit = set(6, value)
        get(): Instant = get(6) as Instant

    open var lastModificationDate: Instant
        set(value): Unit = set(7, value)
        get(): Instant = get(7) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?> = super.fieldsRow() as Row8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?>
    override fun valuesRow(): Row8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?> = super.valuesRow() as Row8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?>
    override fun field1(): Field<UUID?> = RepresentantTable.REPRESENTANT.ID
    override fun field2(): Field<UUID?> = RepresentantTable.REPRESENTANT.ELU_ID
    override fun field3(): Field<String?> = RepresentantTable.REPRESENTANT.PRENOM
    override fun field4(): Field<String?> = RepresentantTable.REPRESENTANT.NOM
    override fun field5(): Field<String?> = RepresentantTable.REPRESENTANT.SEARCH_PRENOM
    override fun field6(): Field<String?> = RepresentantTable.REPRESENTANT.SEARCH_NOM
    override fun field7(): Field<Instant?> = RepresentantTable.REPRESENTANT.CREATION_DATE
    override fun field8(): Field<Instant?> = RepresentantTable.REPRESENTANT.LAST_MODIFICATION_DATE
    override fun component1(): UUID = id
    override fun component2(): UUID? = eluId
    override fun component3(): String = prenom
    override fun component4(): String = nom
    override fun component5(): String = searchPrenom
    override fun component6(): String = searchNom
    override fun component7(): Instant = creationDate
    override fun component8(): Instant = lastModificationDate
    override fun value1(): UUID = id
    override fun value2(): UUID? = eluId
    override fun value3(): String = prenom
    override fun value4(): String = nom
    override fun value5(): String = searchPrenom
    override fun value6(): String = searchNom
    override fun value7(): Instant = creationDate
    override fun value8(): Instant = lastModificationDate

    override fun value1(value: UUID?): RepresentantRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): RepresentantRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): RepresentantRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): RepresentantRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): RepresentantRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): RepresentantRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Instant?): RepresentantRecord {
        set(6, value)
        return this
    }

    override fun value8(value: Instant?): RepresentantRecord {
        set(7, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?, value3: String?, value4: String?, value5: String?, value6: String?, value7: Instant?, value8: Instant?): RepresentantRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised RepresentantRecord
     */
    constructor(id: UUID, eluId: UUID? = null, prenom: String, nom: String, searchPrenom: String, searchNom: String, creationDate: Instant, lastModificationDate: Instant): this() {
        this.id = id
        this.eluId = eluId
        this.prenom = prenom
        this.nom = nom
        this.searchPrenom = searchPrenom
        this.searchNom = searchNom
        this.creationDate = creationDate
        this.lastModificationDate = lastModificationDate
        resetChangedOnNotNull()
    }
}
