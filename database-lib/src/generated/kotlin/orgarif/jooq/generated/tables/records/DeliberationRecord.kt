/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables.records

import java.time.Instant
import java.time.LocalDate
import java.util.UUID
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl
import orgarif.jooq.generated.tables.DeliberationTable

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class DeliberationRecord private constructor() :
    UpdatableRecordImpl<DeliberationRecord>(DeliberationTable.DELIBERATION),
    Record7<UUID?, String?, String?, LocalDate?, String?, Instant?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var libelle: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var searchLibelle: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var deliberationDate: LocalDate
        set(value): Unit = set(3, value)
        get(): LocalDate = get(3) as LocalDate

    open var status: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var creationDate: Instant
        set(value): Unit = set(5, value)
        get(): Instant = get(5) as Instant

    open var lastModificationDate: Instant
        set(value): Unit = set(6, value)
        get(): Instant = get(6) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow():
        Row7<UUID?, String?, String?, LocalDate?, String?, Instant?, Instant?> =
        super.fieldsRow() as Row7<UUID?, String?, String?, LocalDate?, String?, Instant?, Instant?>
    override fun valuesRow():
        Row7<UUID?, String?, String?, LocalDate?, String?, Instant?, Instant?> =
        super.valuesRow() as Row7<UUID?, String?, String?, LocalDate?, String?, Instant?, Instant?>
    override fun field1(): Field<UUID?> = DeliberationTable.DELIBERATION.ID
    override fun field2(): Field<String?> = DeliberationTable.DELIBERATION.LIBELLE
    override fun field3(): Field<String?> = DeliberationTable.DELIBERATION.SEARCH_LIBELLE
    override fun field4(): Field<LocalDate?> = DeliberationTable.DELIBERATION.DELIBERATION_DATE
    override fun field5(): Field<String?> = DeliberationTable.DELIBERATION.STATUS
    override fun field6(): Field<Instant?> = DeliberationTable.DELIBERATION.CREATION_DATE
    override fun field7(): Field<Instant?> = DeliberationTable.DELIBERATION.LAST_MODIFICATION_DATE
    override fun component1(): UUID = id
    override fun component2(): String = libelle
    override fun component3(): String = searchLibelle
    override fun component4(): LocalDate = deliberationDate
    override fun component5(): String = status
    override fun component6(): Instant = creationDate
    override fun component7(): Instant = lastModificationDate
    override fun value1(): UUID = id
    override fun value2(): String = libelle
    override fun value3(): String = searchLibelle
    override fun value4(): LocalDate = deliberationDate
    override fun value5(): String = status
    override fun value6(): Instant = creationDate
    override fun value7(): Instant = lastModificationDate

    override fun value1(value: UUID?): DeliberationRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): DeliberationRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): DeliberationRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDate?): DeliberationRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): DeliberationRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Instant?): DeliberationRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Instant?): DeliberationRecord {
        set(6, value)
        return this
    }

    override fun values(
        value1: UUID?,
        value2: String?,
        value3: String?,
        value4: LocalDate?,
        value5: String?,
        value6: Instant?,
        value7: Instant?
    ): DeliberationRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /** Create a detached, initialised DeliberationRecord */
    constructor(
        id: UUID,
        libelle: String,
        searchLibelle: String,
        deliberationDate: LocalDate,
        status: String,
        creationDate: Instant,
        lastModificationDate: Instant
    ) : this() {
        this.id = id
        this.libelle = libelle
        this.searchLibelle = searchLibelle
        this.deliberationDate = deliberationDate
        this.status = status
        this.creationDate = creationDate
        this.lastModificationDate = lastModificationDate
        resetChangedOnNotNull()
    }
}
