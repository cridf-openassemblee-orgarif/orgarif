/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables


import java.time.Instant
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import orgarif.jooq.generated.PublicTable
import orgarif.jooq.generated.keys.REPRESENTANT_PKEY
import orgarif.jooq.generated.keys.REPRESENTANT__REPRESENTANT_ELU_ID_FKEY
import orgarif.jooq.generated.tables.records.RepresentantRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RepresentantTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RepresentantRecord>?,
    aliased: Table<RepresentantRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RepresentantRecord>(
    alias,
    PublicTable.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.representant</code>
         */
        val REPRESENTANT: RepresentantTable = RepresentantTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RepresentantRecord> = RepresentantRecord::class.java

    /**
     * The column <code>public.representant.id</code>.
     */
    val ID: TableField<RepresentantRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.representant.elu_id</code>.
     */
    val ELU_ID: TableField<RepresentantRecord, UUID?> = createField(DSL.name("elu_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.representant.prenom</code>.
     */
    val PRENOM: TableField<RepresentantRecord, String?> = createField(DSL.name("prenom"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.representant.nom</code>.
     */
    val NOM: TableField<RepresentantRecord, String?> = createField(DSL.name("nom"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.representant.search_prenom</code>.
     */
    val SEARCH_PRENOM: TableField<RepresentantRecord, String?> = createField(DSL.name("search_prenom"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.representant.search_nom</code>.
     */
    val SEARCH_NOM: TableField<RepresentantRecord, String?> = createField(DSL.name("search_nom"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.representant.creation_date</code>.
     */
    val CREATION_DATE: TableField<RepresentantRecord, Instant?> = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", TimestampWithTimeZoneToInstantJooqConverter())

    /**
     * The column <code>public.representant.last_modification_date</code>.
     */
    val LAST_MODIFICATION_DATE: TableField<RepresentantRecord, Instant?> = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(alias: Name, aliased: Table<RepresentantRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RepresentantRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.representant</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.representant</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.representant</code> table reference
     */
    constructor(): this(DSL.name("representant"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RepresentantRecord>): this(Internal.createPathAlias(child, key), child, key, REPRESENTANT, null)
    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC
    override fun getPrimaryKey(): UniqueKey<RepresentantRecord> = REPRESENTANT_PKEY
    override fun getReferences(): List<ForeignKey<RepresentantRecord, *>> = listOf(REPRESENTANT__REPRESENTANT_ELU_ID_FKEY)

    private lateinit var _elu: EluTable

    /**
     * Get the implicit join path to the <code>public.elu</code> table.
     */
    fun elu(): EluTable {
        if (!this::_elu.isInitialized)
            _elu = EluTable(this, REPRESENTANT__REPRESENTANT_ELU_ID_FKEY)

        return _elu;
    }

    val elu: EluTable
        get(): EluTable = elu()
    override fun `as`(alias: String): RepresentantTable = RepresentantTable(DSL.name(alias), this)
    override fun `as`(alias: Name): RepresentantTable = RepresentantTable(alias, this)
    override fun `as`(alias: Table<*>): RepresentantTable = RepresentantTable(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RepresentantTable = RepresentantTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RepresentantTable = RepresentantTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RepresentantTable = RepresentantTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?> = super.fieldsRow() as Row8<UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, String?, String?, String?, String?, Instant?, Instant?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
