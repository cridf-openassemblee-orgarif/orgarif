/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables.records

import java.time.Instant
import java.util.UUID
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl
import orgarif.jooq.generated.tables.UserMailLogTable

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class UserMailLogRecord private constructor() :
    UpdatableRecordImpl<UserMailLogRecord>(UserMailLogTable.USER_MAIL_LOG),
    Record5<UUID?, UUID?, String?, String?, Instant?> {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var userId: UUID
        set(value): Unit = set(1, value)
        get(): UUID = get(1) as UUID

    open var mail: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var type: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var creationDate: Instant
        set(value): Unit = set(4, value)
        get(): Instant = get(4) as Instant

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<UUID?, UUID?, String?, String?, Instant?> =
        super.fieldsRow() as Row5<UUID?, UUID?, String?, String?, Instant?>
    override fun valuesRow(): Row5<UUID?, UUID?, String?, String?, Instant?> =
        super.valuesRow() as Row5<UUID?, UUID?, String?, String?, Instant?>
    override fun field1(): Field<UUID?> = UserMailLogTable.USER_MAIL_LOG.ID
    override fun field2(): Field<UUID?> = UserMailLogTable.USER_MAIL_LOG.USER_ID
    override fun field3(): Field<String?> = UserMailLogTable.USER_MAIL_LOG.MAIL
    override fun field4(): Field<String?> = UserMailLogTable.USER_MAIL_LOG.TYPE
    override fun field5(): Field<Instant?> = UserMailLogTable.USER_MAIL_LOG.CREATION_DATE
    override fun component1(): UUID = id
    override fun component2(): UUID = userId
    override fun component3(): String = mail
    override fun component4(): String = type
    override fun component5(): Instant = creationDate
    override fun value1(): UUID = id
    override fun value2(): UUID = userId
    override fun value3(): String = mail
    override fun value4(): String = type
    override fun value5(): Instant = creationDate

    override fun value1(value: UUID?): UserMailLogRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): UserMailLogRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UserMailLogRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): UserMailLogRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Instant?): UserMailLogRecord {
        set(4, value)
        return this
    }

    override fun values(
        value1: UUID?,
        value2: UUID?,
        value3: String?,
        value4: String?,
        value5: Instant?
    ): UserMailLogRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /** Create a detached, initialised UserMailLogRecord */
    constructor(
        id: UUID,
        userId: UUID,
        mail: String,
        type: String,
        creationDate: Instant
    ) : this() {
        this.id = id
        this.userId = userId
        this.mail = mail
        this.type = type
        this.creationDate = creationDate
        resetChangedOnNotNull()
    }
}
