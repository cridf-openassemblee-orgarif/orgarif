/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables

import java.time.Instant
import java.util.UUID
import kotlin.collections.List
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter
import orgarif.jooq.generated.PublicTable
import orgarif.jooq.generated.indexes.LIEN_DELIBERATION_ORGANISME_ID_IDX
import orgarif.jooq.generated.keys.LIEN_DELIBERATION_PKEY
import orgarif.jooq.generated.keys.LIEN_DELIBERATION__LIEN_DELIBERATION_DELIBERATION_ID_FKEY
import orgarif.jooq.generated.keys.LIEN_DELIBERATION__LIEN_DELIBERATION_INSTANCE_ID_FKEY
import orgarif.jooq.generated.keys.LIEN_DELIBERATION__LIEN_DELIBERATION_ORGANISME_ID_FKEY
import orgarif.jooq.generated.tables.records.LienDeliberationRecord

/** This class is generated by jOOQ. */
@Suppress("UNCHECKED_CAST")
open class LienDeliberationTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, LienDeliberationRecord>?,
    aliased: Table<LienDeliberationRecord>?,
    parameters: Array<Field<*>?>?
) :
    TableImpl<LienDeliberationRecord>(
        alias,
        PublicTable.PUBLIC,
        child,
        path,
        aliased,
        parameters,
        DSL.comment(""),
        TableOptions.table()) {
    companion object {

        /** The reference instance of <code>public.lien_deliberation</code> */
        val LIEN_DELIBERATION: LienDeliberationTable = LienDeliberationTable()
    }

    /** The class holding records for this type */
    override fun getRecordType(): Class<LienDeliberationRecord> = LienDeliberationRecord::class.java

    /** The column <code>public.lien_deliberation.id</code>. */
    val ID: TableField<LienDeliberationRecord, UUID?> =
        createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.lien_deliberation.organisme_id</code>. */
    val ORGANISME_ID: TableField<LienDeliberationRecord, UUID?> =
        createField(DSL.name("organisme_id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.lien_deliberation.instance_id</code>. */
    val INSTANCE_ID: TableField<LienDeliberationRecord, UUID?> =
        createField(DSL.name("instance_id"), SQLDataType.UUID, this, "")

    /** The column <code>public.lien_deliberation.deliberation_id</code>. */
    val DELIBERATION_ID: TableField<LienDeliberationRecord, UUID?> =
        createField(DSL.name("deliberation_id"), SQLDataType.UUID.nullable(false), this, "")

    /** The column <code>public.lien_deliberation.comment</code>. */
    val COMMENT: TableField<LienDeliberationRecord, String?> =
        createField(DSL.name("comment"), SQLDataType.CLOB, this, "")

    /** The column <code>public.lien_deliberation.status</code>. */
    val STATUS: TableField<LienDeliberationRecord, String?> =
        createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /** The column <code>public.lien_deliberation.creation_date</code>. */
    val CREATION_DATE: TableField<LienDeliberationRecord, Instant?> =
        createField(
            DSL.name("creation_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    /** The column <code>public.lien_deliberation.last_modification_date</code>. */
    val LAST_MODIFICATION_DATE: TableField<LienDeliberationRecord, Instant?> =
        createField(
            DSL.name("last_modification_date"),
            SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
            this,
            "",
            TimestampWithTimeZoneToInstantJooqConverter())

    private constructor(
        alias: Name,
        aliased: Table<LienDeliberationRecord>?
    ) : this(alias, null, null, aliased, null)
    private constructor(
        alias: Name,
        aliased: Table<LienDeliberationRecord>?,
        parameters: Array<Field<*>?>?
    ) : this(alias, null, null, aliased, parameters)

    /** Create an aliased <code>public.lien_deliberation</code> table reference */
    constructor(alias: String) : this(DSL.name(alias))

    /** Create an aliased <code>public.lien_deliberation</code> table reference */
    constructor(alias: Name) : this(alias, null)

    /** Create a <code>public.lien_deliberation</code> table reference */
    constructor() : this(DSL.name("lien_deliberation"), null)

    constructor(
        child: Table<out Record>,
        key: ForeignKey<out Record, LienDeliberationRecord>
    ) : this(Internal.createPathAlias(child, key), child, key, LIEN_DELIBERATION, null)
    override fun getSchema(): Schema? = if (aliased()) null else PublicTable.PUBLIC
    override fun getIndexes(): List<Index> = listOf(LIEN_DELIBERATION_ORGANISME_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<LienDeliberationRecord> = LIEN_DELIBERATION_PKEY
    override fun getReferences(): List<ForeignKey<LienDeliberationRecord, *>> =
        listOf(
            LIEN_DELIBERATION__LIEN_DELIBERATION_ORGANISME_ID_FKEY,
            LIEN_DELIBERATION__LIEN_DELIBERATION_INSTANCE_ID_FKEY,
            LIEN_DELIBERATION__LIEN_DELIBERATION_DELIBERATION_ID_FKEY)

    private lateinit var _organisme: OrganismeTable
    private lateinit var _instance: InstanceTable
    private lateinit var _deliberation: DeliberationTable

    /** Get the implicit join path to the <code>public.organisme</code> table. */
    fun organisme(): OrganismeTable {
        if (!this::_organisme.isInitialized)
            _organisme =
                OrganismeTable(this, LIEN_DELIBERATION__LIEN_DELIBERATION_ORGANISME_ID_FKEY)

        return _organisme
    }

    val organisme: OrganismeTable
        get(): OrganismeTable = organisme()

    /** Get the implicit join path to the <code>public.instance</code> table. */
    fun instance(): InstanceTable {
        if (!this::_instance.isInitialized)
            _instance = InstanceTable(this, LIEN_DELIBERATION__LIEN_DELIBERATION_INSTANCE_ID_FKEY)

        return _instance
    }

    val instance: InstanceTable
        get(): InstanceTable = instance()

    /** Get the implicit join path to the <code>public.deliberation</code> table. */
    fun deliberation(): DeliberationTable {
        if (!this::_deliberation.isInitialized)
            _deliberation =
                DeliberationTable(this, LIEN_DELIBERATION__LIEN_DELIBERATION_DELIBERATION_ID_FKEY)

        return _deliberation
    }

    val deliberation: DeliberationTable
        get(): DeliberationTable = deliberation()
    override fun `as`(alias: String): LienDeliberationTable =
        LienDeliberationTable(DSL.name(alias), this)
    override fun `as`(alias: Name): LienDeliberationTable = LienDeliberationTable(alias, this)
    override fun `as`(alias: Table<*>): LienDeliberationTable =
        LienDeliberationTable(alias.getQualifiedName(), this)

    /** Rename this table */
    override fun rename(name: String): LienDeliberationTable =
        LienDeliberationTable(DSL.name(name), null)

    /** Rename this table */
    override fun rename(name: Name): LienDeliberationTable = LienDeliberationTable(name, null)

    /** Rename this table */
    override fun rename(name: Table<*>): LienDeliberationTable =
        LienDeliberationTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow():
        Row8<UUID?, UUID?, UUID?, UUID?, String?, String?, Instant?, Instant?> =
        super.fieldsRow() as Row8<UUID?, UUID?, UUID?, UUID?, String?, String?, Instant?, Instant?>

    /** Convenience mapping calling {@link SelectField#convertFrom(Function)}. */
    fun <U> mapping(
        from: (UUID?, UUID?, UUID?, UUID?, String?, String?, Instant?, Instant?) -> U
    ): SelectField<U> = convertFrom(Records.mapping(from))

    /** Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}. */
    fun <U> mapping(
        toType: Class<U>,
        from: (UUID?, UUID?, UUID?, UUID?, String?, String?, Instant?, Instant?) -> U
    ): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
