/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.time.LocalDate;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.DeliberationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeliberationTable extends TableImpl<DeliberationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deliberation</code>
     */
    public static final DeliberationTable DELIBERATION = new DeliberationTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<DeliberationRecord> getRecordType() {
        return DeliberationRecord.class;
    }

    /**
     * The column <code>public.deliberation.id</code>.
     */
    public final TableField<DeliberationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.deliberation.libelle</code>.
     */
    public final TableField<DeliberationRecord, String> LIBELLE = createField(DSL.name("libelle"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.deliberation.search_libelle</code>.
     */
    public final TableField<DeliberationRecord, String> SEARCH_LIBELLE = createField(DSL.name("search_libelle"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.deliberation.deliberation_date</code>.
     */
    public final TableField<DeliberationRecord, LocalDate> DELIBERATION_DATE = createField(DSL.name("deliberation_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.deliberation.status</code>.
     */
    public final TableField<DeliberationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.deliberation.creation_date</code>.
     */
    public final TableField<DeliberationRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    /**
     * The column <code>public.deliberation.last_modification_date</code>.
     */
    public final TableField<DeliberationRecord, Instant> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    private DeliberationTable(Name alias, Table<DeliberationRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeliberationTable(Name alias, Table<DeliberationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.deliberation</code> table reference
     */
    public DeliberationTable(String alias) {
        this(DSL.name(alias), DELIBERATION);
    }

    /**
     * Create an aliased <code>public.deliberation</code> table reference
     */
    public DeliberationTable(Name alias) {
        this(alias, DELIBERATION);
    }

    /**
     * Create a <code>public.deliberation</code> table reference
     */
    public DeliberationTable() {
        this(DSL.name("deliberation"), null);
    }

    public <O extends Record> DeliberationTable(Table<O> child, ForeignKey<O, DeliberationRecord> key) {
        super(child, key, DELIBERATION);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<DeliberationRecord> getPrimaryKey() {
        return Keys.DELIBERATION_PKEY;
    }

    @Override
    @Nonnull
    public DeliberationTable as(String alias) {
        return new DeliberationTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public DeliberationTable as(Name alias) {
        return new DeliberationTable(alias, this);
    }

    @Override
    @Nonnull
    public DeliberationTable as(Table<?> alias) {
        return new DeliberationTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DeliberationTable rename(String name) {
        return new DeliberationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DeliberationTable rename(Name name) {
        return new DeliberationTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DeliberationTable rename(Table<?> name) {
        return new DeliberationTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, String, String, LocalDate, String, Instant, Instant> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super String, ? super String, ? super LocalDate, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super String, ? super String, ? super LocalDate, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
