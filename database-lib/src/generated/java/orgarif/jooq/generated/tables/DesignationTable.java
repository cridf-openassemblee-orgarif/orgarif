/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter;
import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.DesignationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DesignationTable extends TableImpl<DesignationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.designation</code>
     */
    public static final DesignationTable DESIGNATION = new DesignationTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<DesignationRecord> getRecordType() {
        return DesignationRecord.class;
    }

    /**
     * The column <code>public.designation.id</code>.
     */
    public final TableField<DesignationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.designation.representant_id</code>.
     */
    public final TableField<DesignationRecord, UUID> REPRESENTANT_ID = createField(DSL.name("representant_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.designation.organisme_id</code>.
     */
    public final TableField<DesignationRecord, UUID> ORGANISME_ID = createField(DSL.name("organisme_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.designation.instance_id</code>.
     */
    public final TableField<DesignationRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.designation.type</code>.
     */
    public final TableField<DesignationRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.designation.position</code>.
     */
    public final TableField<DesignationRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.designation.start_date</code>.
     */
    public final TableField<DesignationRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.designation.end_date</code>.
     */
    public final TableField<DesignationRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.designation.status</code>.
     */
    public final TableField<DesignationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.designation.creation_date</code>.
     */
    public final TableField<DesignationRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    /**
     * The column <code>public.designation.last_modification_date</code>.
     */
    public final TableField<DesignationRecord, Instant> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    private DesignationTable(Name alias, Table<DesignationRecord> aliased) {
        this(alias, aliased, null);
    }

    private DesignationTable(Name alias, Table<DesignationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.designation</code> table reference
     */
    public DesignationTable(String alias) {
        this(DSL.name(alias), DESIGNATION);
    }

    /**
     * Create an aliased <code>public.designation</code> table reference
     */
    public DesignationTable(Name alias) {
        this(alias, DESIGNATION);
    }

    /**
     * Create a <code>public.designation</code> table reference
     */
    public DesignationTable() {
        this(DSL.name("designation"), null);
    }

    public <O extends Record> DesignationTable(Table<O> child, ForeignKey<O, DesignationRecord> key) {
        super(child, key, DESIGNATION);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DESIGNATION_INSTANCE_ID_IDX, Indexes.DESIGNATION_ORGANISME_ID_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<DesignationRecord> getPrimaryKey() {
        return Keys.DESIGNATION_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<DesignationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DESIGNATION__DESIGNATION_REPRESENTANT_ID_FKEY, Keys.DESIGNATION__DESIGNATION_ORGANISME_ID_FKEY, Keys.DESIGNATION__DESIGNATION_INSTANCE_ID_FKEY);
    }

    private transient RepresentantTable _representant;
    private transient OrganismeTable _organisme;
    private transient InstanceTable _instance;

    /**
     * Get the implicit join path to the <code>public.representant</code> table.
     */
    public RepresentantTable representant() {
        if (_representant == null)
            _representant = new RepresentantTable(this, Keys.DESIGNATION__DESIGNATION_REPRESENTANT_ID_FKEY);

        return _representant;
    }

    /**
     * Get the implicit join path to the <code>public.organisme</code> table.
     */
    public OrganismeTable organisme() {
        if (_organisme == null)
            _organisme = new OrganismeTable(this, Keys.DESIGNATION__DESIGNATION_ORGANISME_ID_FKEY);

        return _organisme;
    }

    /**
     * Get the implicit join path to the <code>public.instance</code> table.
     */
    public InstanceTable instance() {
        if (_instance == null)
            _instance = new InstanceTable(this, Keys.DESIGNATION__DESIGNATION_INSTANCE_ID_FKEY);

        return _instance;
    }

    @Override
    @Nonnull
    public DesignationTable as(String alias) {
        return new DesignationTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public DesignationTable as(Name alias) {
        return new DesignationTable(alias, this);
    }

    @Override
    @Nonnull
    public DesignationTable as(Table<?> alias) {
        return new DesignationTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DesignationTable rename(String name) {
        return new DesignationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DesignationTable rename(Name name) {
        return new DesignationTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DesignationTable rename(Table<?> name) {
        return new DesignationTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row11<UUID, UUID, UUID, UUID, String, Integer, LocalDate, LocalDate, String, Instant, Instant> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super String, ? super Integer, ? super LocalDate, ? super LocalDate, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super String, ? super Integer, ? super LocalDate, ? super LocalDate, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
