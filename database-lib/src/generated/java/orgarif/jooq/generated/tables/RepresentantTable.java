/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.RepresentantRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepresentantTable extends TableImpl<RepresentantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.representant</code>
     */
    public static final RepresentantTable REPRESENTANT = new RepresentantTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<RepresentantRecord> getRecordType() {
        return RepresentantRecord.class;
    }

    /**
     * The column <code>public.representant.id</code>.
     */
    public final TableField<RepresentantRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.representant.elu_id</code>.
     */
    public final TableField<RepresentantRecord, UUID> ELU_ID = createField(DSL.name("elu_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.representant.prenom</code>.
     */
    public final TableField<RepresentantRecord, String> PRENOM = createField(DSL.name("prenom"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.representant.nom</code>.
     */
    public final TableField<RepresentantRecord, String> NOM = createField(DSL.name("nom"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.representant.search_prenom</code>.
     */
    public final TableField<RepresentantRecord, String> SEARCH_PRENOM = createField(DSL.name("search_prenom"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.representant.search_nom</code>.
     */
    public final TableField<RepresentantRecord, String> SEARCH_NOM = createField(DSL.name("search_nom"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.representant.creation_date</code>.
     */
    public final TableField<RepresentantRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    /**
     * The column <code>public.representant.last_modification_date</code>.
     */
    public final TableField<RepresentantRecord, Instant> LAST_MODIFICATION_DATE = createField(DSL.name("last_modification_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    private RepresentantTable(Name alias, Table<RepresentantRecord> aliased) {
        this(alias, aliased, null);
    }

    private RepresentantTable(Name alias, Table<RepresentantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.representant</code> table reference
     */
    public RepresentantTable(String alias) {
        this(DSL.name(alias), REPRESENTANT);
    }

    /**
     * Create an aliased <code>public.representant</code> table reference
     */
    public RepresentantTable(Name alias) {
        this(alias, REPRESENTANT);
    }

    /**
     * Create a <code>public.representant</code> table reference
     */
    public RepresentantTable() {
        this(DSL.name("representant"), null);
    }

    public <O extends Record> RepresentantTable(Table<O> child, ForeignKey<O, RepresentantRecord> key) {
        super(child, key, REPRESENTANT);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<RepresentantRecord> getPrimaryKey() {
        return Keys.REPRESENTANT_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<RepresentantRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPRESENTANT__REPRESENTANT_ELU_ID_FKEY);
    }

    private transient EluTable _elu;

    /**
     * Get the implicit join path to the <code>public.elu</code> table.
     */
    public EluTable elu() {
        if (_elu == null)
            _elu = new EluTable(this, Keys.REPRESENTANT__REPRESENTANT_ELU_ID_FKEY);

        return _elu;
    }

    @Override
    @Nonnull
    public RepresentantTable as(String alias) {
        return new RepresentantTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public RepresentantTable as(Name alias) {
        return new RepresentantTable(alias, this);
    }

    @Override
    @Nonnull
    public RepresentantTable as(Table<?> alias) {
        return new RepresentantTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RepresentantTable rename(String name) {
        return new RepresentantTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RepresentantTable rename(Name name) {
        return new RepresentantTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public RepresentantTable rename(Table<?> name) {
        return new RepresentantTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, UUID, String, String, String, String, Instant, Instant> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super UUID, ? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
