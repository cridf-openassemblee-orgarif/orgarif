/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables.records;


import java.time.Instant;
import java.util.UUID;

import javax.annotation.Nonnull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import orgarif.jooq.generated.tables.UserFileTable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFileRecord extends UpdatableRecordImpl<UserFileRecord> implements Record6<UUID, UUID, byte[], String, String, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.user_file.id</code>.
     */
    public void setId(@Nonnull UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_file.id</code>.
     */
    @Nonnull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.user_file.user_id</code>.
     */
    public void setUserId(@Nonnull UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_file.user_id</code>.
     */
    @Nonnull
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.user_file.file_content</code>.
     */
    public void setFileContent(@Nonnull byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_file.file_content</code>.
     */
    @Nonnull
    public byte[] getFileContent() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>public.user_file.content_type</code>.
     */
    public void setContentType(@Nonnull String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.user_file.content_type</code>.
     */
    @Nonnull
    public String getContentType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.user_file.original_filename</code>.
     */
    public void setOriginalFilename(@Nonnull String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.user_file.original_filename</code>.
     */
    @Nonnull
    public String getOriginalFilename() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.user_file.upload_date</code>.
     */
    public void setUploadDate(@Nonnull Instant value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.user_file.upload_date</code>.
     */
    @Nonnull
    public Instant getUploadDate() {
        return (Instant) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row6<UUID, UUID, byte[], String, String, Instant> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row6<UUID, UUID, byte[], String, String, Instant> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<UUID> field1() {
        return UserFileTable.USER_FILE.ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field2() {
        return UserFileTable.USER_FILE.USER_ID;
    }

    @Override
    @Nonnull
    public Field<byte[]> field3() {
        return UserFileTable.USER_FILE.FILE_CONTENT;
    }

    @Override
    @Nonnull
    public Field<String> field4() {
        return UserFileTable.USER_FILE.CONTENT_TYPE;
    }

    @Override
    @Nonnull
    public Field<String> field5() {
        return UserFileTable.USER_FILE.ORIGINAL_FILENAME;
    }

    @Override
    @Nonnull
    public Field<Instant> field6() {
        return UserFileTable.USER_FILE.UPLOAD_DATE;
    }

    @Override
    @Nonnull
    public UUID component1() {
        return getId();
    }

    @Override
    @Nonnull
    public UUID component2() {
        return getUserId();
    }

    @Override
    @Nonnull
    public byte[] component3() {
        return getFileContent();
    }

    @Override
    @Nonnull
    public String component4() {
        return getContentType();
    }

    @Override
    @Nonnull
    public String component5() {
        return getOriginalFilename();
    }

    @Override
    @Nonnull
    public Instant component6() {
        return getUploadDate();
    }

    @Override
    @Nonnull
    public UUID value1() {
        return getId();
    }

    @Override
    @Nonnull
    public UUID value2() {
        return getUserId();
    }

    @Override
    @Nonnull
    public byte[] value3() {
        return getFileContent();
    }

    @Override
    @Nonnull
    public String value4() {
        return getContentType();
    }

    @Override
    @Nonnull
    public String value5() {
        return getOriginalFilename();
    }

    @Override
    @Nonnull
    public Instant value6() {
        return getUploadDate();
    }

    @Override
    @Nonnull
    public UserFileRecord value1(@Nonnull UUID value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public UserFileRecord value2(@Nonnull UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    @Nonnull
    public UserFileRecord value3(@Nonnull byte[] value) {
        setFileContent(value);
        return this;
    }

    @Override
    @Nonnull
    public UserFileRecord value4(@Nonnull String value) {
        setContentType(value);
        return this;
    }

    @Override
    @Nonnull
    public UserFileRecord value5(@Nonnull String value) {
        setOriginalFilename(value);
        return this;
    }

    @Override
    @Nonnull
    public UserFileRecord value6(@Nonnull Instant value) {
        setUploadDate(value);
        return this;
    }

    @Override
    @Nonnull
    public UserFileRecord values(@Nonnull UUID value1, @Nonnull UUID value2, @Nonnull byte[] value3, @Nonnull String value4, @Nonnull String value5, @Nonnull Instant value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserFileRecord
     */
    public UserFileRecord() {
        super(UserFileTable.USER_FILE);
    }

    /**
     * Create a detached, initialised UserFileRecord
     */
    public UserFileRecord(@Nonnull UUID id, @Nonnull UUID userId, @Nonnull byte[] fileContent, @Nonnull String contentType, @Nonnull String originalFilename, @Nonnull Instant uploadDate) {
        super(UserFileTable.USER_FILE);

        setId(id);
        setUserId(userId);
        setFileContent(fileContent);
        setContentType(contentType);
        setOriginalFilename(originalFilename);
        setUploadDate(uploadDate);
        resetChangedOnNotNull();
    }
}
