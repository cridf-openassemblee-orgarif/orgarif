/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.DeploymentLogRecord;
import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter;

import java.time.Instant;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeploymentLogTable extends TableImpl<DeploymentLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deployment_log</code>
     */
    public static final DeploymentLogTable DEPLOYMENT_LOG = new DeploymentLogTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<DeploymentLogRecord> getRecordType() {
        return DeploymentLogRecord.class;
    }

    /**
     * The column <code>public.deployment_log.id</code>.
     */
    public final TableField<DeploymentLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.deployment_log.build_version</code>.
     */
    public final TableField<DeploymentLogRecord, String> BUILD_VERSION = createField(DSL.name("build_version"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.deployment_log.system_zone_id</code>.
     */
    public final TableField<DeploymentLogRecord, String> SYSTEM_ZONE_ID = createField(DSL.name("system_zone_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.deployment_log.startup_date</code>.
     */
    public final TableField<DeploymentLogRecord, Instant> STARTUP_DATE = createField(DSL.name("startup_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    /**
     * The column <code>public.deployment_log.shutdown_date</code>.
     */
    public final TableField<DeploymentLogRecord, Instant> SHUTDOWN_DATE = createField(DSL.name("shutdown_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    private DeploymentLogTable(Name alias, Table<DeploymentLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeploymentLogTable(Name alias, Table<DeploymentLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.deployment_log</code> table reference
     */
    public DeploymentLogTable(String alias) {
        this(DSL.name(alias), DEPLOYMENT_LOG);
    }

    /**
     * Create an aliased <code>public.deployment_log</code> table reference
     */
    public DeploymentLogTable(Name alias) {
        this(alias, DEPLOYMENT_LOG);
    }

    /**
     * Create a <code>public.deployment_log</code> table reference
     */
    public DeploymentLogTable() {
        this(DSL.name("deployment_log"), null);
    }

    public <O extends Record> DeploymentLogTable(Table<O> child, ForeignKey<O, DeploymentLogRecord> key) {
        super(child, key, DEPLOYMENT_LOG);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<DeploymentLogRecord> getPrimaryKey() {
        return Keys.DEPLOYMENT_LOG_PKEY;
    }

    @Override
    @Nonnull
    public DeploymentLogTable as(String alias) {
        return new DeploymentLogTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public DeploymentLogTable as(Name alias) {
        return new DeploymentLogTable(alias, this);
    }

    @Override
    @Nonnull
    public DeploymentLogTable as(Table<?> alias) {
        return new DeploymentLogTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DeploymentLogTable rename(String name) {
        return new DeploymentLogTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DeploymentLogTable rename(Name name) {
        return new DeploymentLogTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public DeploymentLogTable rename(Table<?> name) {
        return new DeploymentLogTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<UUID, String, String, Instant, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
