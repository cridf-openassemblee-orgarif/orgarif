/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import orgarif.jooq.generated.Indexes;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.UserMailLogRecord;
import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMailLogTable extends TableImpl<UserMailLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_mail_log</code>
     */
    public static final UserMailLogTable USER_MAIL_LOG = new UserMailLogTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<UserMailLogRecord> getRecordType() {
        return UserMailLogRecord.class;
    }

    /**
     * The column <code>public.user_mail_log.id</code>.
     */
    public final TableField<UserMailLogRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_mail_log.user_id</code>.
     */
    public final TableField<UserMailLogRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_mail_log.mail</code>.
     */
    public final TableField<UserMailLogRecord, String> MAIL = createField(DSL.name("mail"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_mail_log.type</code>.
     */
    public final TableField<UserMailLogRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_mail_log.creation_date</code>.
     */
    public final TableField<UserMailLogRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    private UserMailLogTable(Name alias, Table<UserMailLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMailLogTable(Name alias, Table<UserMailLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_mail_log</code> table reference
     */
    public UserMailLogTable(String alias) {
        this(DSL.name(alias), USER_MAIL_LOG);
    }

    /**
     * Create an aliased <code>public.user_mail_log</code> table reference
     */
    public UserMailLogTable(Name alias) {
        this(alias, USER_MAIL_LOG);
    }

    /**
     * Create a <code>public.user_mail_log</code> table reference
     */
    public UserMailLogTable() {
        this(DSL.name("user_mail_log"), null);
    }

    public <O extends Record> UserMailLogTable(Table<O> child, ForeignKey<O, UserMailLogRecord> key) {
        super(child, key, USER_MAIL_LOG);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_MAIL_LOG_USER_ID_IDX);
    }

    @Override
    @Nonnull
    public UniqueKey<UserMailLogRecord> getPrimaryKey() {
        return Keys.USER_MAIL_LOG_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<UserMailLogRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_MAIL_LOG__USER_MAIL_LOG_USER_ID_FKEY);
    }

    private transient AppUserTable _appUser;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUserTable appUser() {
        if (_appUser == null)
            _appUser = new AppUserTable(this, Keys.USER_MAIL_LOG__USER_MAIL_LOG_USER_ID_FKEY);

        return _appUser;
    }

    @Override
    @Nonnull
    public UserMailLogTable as(String alias) {
        return new UserMailLogTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public UserMailLogTable as(Name alias) {
        return new UserMailLogTable(alias, this);
    }

    @Override
    @Nonnull
    public UserMailLogTable as(Table<?> alias) {
        return new UserMailLogTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserMailLogTable rename(String name) {
        return new UserMailLogTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserMailLogTable rename(Name name) {
        return new UserMailLogTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserMailLogTable rename(Table<?> name) {
        return new UserMailLogTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<UUID, UUID, String, String, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super String, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super String, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
