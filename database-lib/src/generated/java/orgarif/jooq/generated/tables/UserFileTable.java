/*
 * This file is generated by jOOQ.
 */
package orgarif.jooq.generated.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import orgarif.database.jooq.converter.TimestampWithTimeZoneToInstantJooqConverter;
import orgarif.jooq.generated.Keys;
import orgarif.jooq.generated.PublicTable;
import orgarif.jooq.generated.tables.records.UserFileRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFileTable extends TableImpl<UserFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_file</code>
     */
    public static final UserFileTable USER_FILE = new UserFileTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<UserFileRecord> getRecordType() {
        return UserFileRecord.class;
    }

    /**
     * The column <code>public.user_file.id</code>.
     */
    public final TableField<UserFileRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_file.user_id</code>.
     */
    public final TableField<UserFileRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_file.file_content</code>.
     */
    public final TableField<UserFileRecord, byte[]> FILE_CONTENT = createField(DSL.name("file_content"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_file.content_type</code>.
     */
    public final TableField<UserFileRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_file.original_filename</code>.
     */
    public final TableField<UserFileRecord, String> ORIGINAL_FILENAME = createField(DSL.name("original_filename"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_file.upload_date</code>.
     */
    public final TableField<UserFileRecord, Instant> UPLOAD_DATE = createField(DSL.name("upload_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new TimestampWithTimeZoneToInstantJooqConverter());

    private UserFileTable(Name alias, Table<UserFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFileTable(Name alias, Table<UserFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_file</code> table reference
     */
    public UserFileTable(String alias) {
        this(DSL.name(alias), USER_FILE);
    }

    /**
     * Create an aliased <code>public.user_file</code> table reference
     */
    public UserFileTable(Name alias) {
        this(alias, USER_FILE);
    }

    /**
     * Create a <code>public.user_file</code> table reference
     */
    public UserFileTable() {
        this(DSL.name("user_file"), null);
    }

    public <O extends Record> UserFileTable(Table<O> child, ForeignKey<O, UserFileRecord> key) {
        super(child, key, USER_FILE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : PublicTable.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<UserFileRecord> getPrimaryKey() {
        return Keys.USER_FILE_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<UserFileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FILE__USER_FILE_USER_ID_FKEY);
    }

    private transient AppUserTable _appUser;

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    public AppUserTable appUser() {
        if (_appUser == null)
            _appUser = new AppUserTable(this, Keys.USER_FILE__USER_FILE_USER_ID_FKEY);

        return _appUser;
    }

    @Override
    @Nonnull
    public UserFileTable as(String alias) {
        return new UserFileTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public UserFileTable as(Name alias) {
        return new UserFileTable(alias, this);
    }

    @Override
    @Nonnull
    public UserFileTable as(Table<?> alias) {
        return new UserFileTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserFileTable rename(String name) {
        return new UserFileTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserFileTable rename(Name name) {
        return new UserFileTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserFileTable rename(Table<?> name) {
        return new UserFileTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row6<UUID, UUID, byte[], String, String, Instant> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super UUID, ? super byte[], ? super String, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super UUID, ? super byte[], ? super String, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
